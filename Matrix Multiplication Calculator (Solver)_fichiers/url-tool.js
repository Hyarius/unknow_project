// Generated by CoffeeScript 1.7.1
(function() {
  var UrlTool, onPopStateListeners, urlChangeListeners, urlToolModule,
    __hasProp = {}.hasOwnProperty;

  onPopStateListeners = [];

  urlChangeListeners = [];

  UrlTool = {
    toParametersMap: function(string) {
      var element, elements, pair, resultMap, _i, _len;
      if (string.slice(0, 1) === "?") {
        string = string.slice(1);
      }
      elements = string.split(/\s*&\s*/);
      resultMap = {};
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        element = elements[_i];
        if (element.length > (element.indexOf('=') + 1)) {
          pair = this.createPair(element);
          if (pair[0].indexOf('utm_') !== 0) {
            resultMap[pair[0]] = pair[1];
          }
        }
      }
      return resultMap;
    },
    createPair: function(element) {
      var e, jsonValue, value;
      value = element.slice(element.indexOf('=') + 1);
      try {
        jsonValue = JSON.parse(value);
      } catch (_error) {
        e = _error;
        jsonValue = JSON.parse('"' + value + '"');
      }
      return [element.slice(0, element.indexOf('=')), jsonValue];
    },
    toUrlString: function(map) {
      var key, resultString, value;
      resultString = "?";
      for (key in map) {
        value = map[key];
        resultString += key + "=" + this.stripQuotes(JSON.stringify(value)) + "&";
      }
      return resultString.slice(0, resultString.length - 1);
    },
    stripQuotes: function(value) {
      if ((value != null ? value.slice(0, 1) : void 0) === '"') {
        value = value.slice(1, value.length - 1);
      }
      return value;
    },
    checkUrl: function(delLang) {
      var input, k;
      if (delLang == null) {
        delLang = true;
      }
      input = this.getInputFromUrl();
      if (delLang) {
        delete input.language;
      }
      return ((function() {
        var _results;
        _results = [];
        for (k in input) {
          if (!__hasProp.call(input, k)) continue;
          _results.push(k);
        }
        return _results;
      })()).length !== 0;
    },
    getInputFromUrl: function() {
      return this.toParametersMap(decodeURIComponent(window.location.search));
    },
    setUrlFromInput: function(input) {
      var _ref;
      if (((_ref = window.history) != null ? _ref.pushState : void 0) != null) {
        window.history.pushState(input, "Query", this.toUrlString(input));
        this.fireUrlChange();
      }
      return typeof _gaq !== "undefined" && _gaq !== null ? _gaq.push(['_trackPageview', window.location.pathname]) : void 0;
    },
    addOnPopStateListener: (function(_this) {
      return function(listener) {
        return onPopStateListeners.push(listener);
      };
    })(this),
    handlePopStateEvent: (function(_this) {
      return function(event) {
        var listener, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = onPopStateListeners.length; _i < _len; _i++) {
          listener = onPopStateListeners[_i];
          _results.push(listener(event));
        }
        return _results;
      };
    })(this),
    addUrlChangeListener: (function(_this) {
      return function(listener) {
        onPopStateListeners.push(listener);
        return urlChangeListeners.push(listener);
      };
    })(this),
    fireUrlChange: (function(_this) {
      return function() {
        var listener, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = urlChangeListeners.length; _i < _len; _i++) {
          listener = urlChangeListeners[_i];
          _results.push(listener());
        }
        return _results;
      };
    })(this)
  };

  window.onpopstate = UrlTool.handlePopStateEvent;

  this.UrlTool = UrlTool;

  if (typeof angular !== "undefined" && angular !== null) {
    urlToolModule = angular.module('calculUrlToolModule', []);
    urlToolModule.factory('calculUrlTool', function() {
      return UrlTool;
    });
  }

}).call(this);
