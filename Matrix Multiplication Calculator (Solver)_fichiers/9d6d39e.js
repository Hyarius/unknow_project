// Generated by CoffeeScript 1.7.1
(function() {
  var BinomialForm, BinomialInputDisplay, FunctionAtModel, GcdFirstForm, GcdInputDisplay, GcdModel, GcdSecondForm, MathInput, MathInputModel, MathInputModelConnection, MathQuillConnection, MathRule, ParserForm, SolverEquation, SolverModel, SyntaxError, TextConnection, binomialExamples, binomialInputToLatex, createSolverAnswerElement, displayEuclideanAnswer, displayFuncAtAnswer, displayResult, displayStep, euclideanAlg, extractAndParseResult, factor, gcdExamples, gcdParser, multiEuclideanAlg, parseArt, parseArtAndEval, parseGcd, parseMathExpr, parsedInputToLatex, parserFormView, prepareAnswer, random, tabsJQueryPlugin,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ko.validation.rules['greaterEqual'] = {
    validator: function(val, otherVal) {
      return parseInt(val) >= ko.toJS(otherVal);
    },
    message: function(otherVal) {
      return "This field must be greater or equal " + (ko.toJS(otherVal));
    }
  };

  ko.validation.rules['lessEqual'] = {
    validator: function(val, otherVal) {
      return parseInt(val) <= ko.toJS(otherVal);
    },
    message: function(otherVal) {
      return "This field must be less or equal " + (ko.toJS(otherVal));
    }
  };

  ko.validation.rules['parsable'] = {
    validator: function(val, args) {
      var error, msg, parseText, parser, status;
      parser = args[0], msg = args[1];
      try {
        parseText = _pl.parseText;
        status = parseText(val, parser);
        status.text.trim();
        return status.text.length === 0;
      } catch (_error) {
        error = _error;
        return false;
      }
    },
    message: function(args) {
      var msg, parser;
      parser = args[0], msg = args[1];
      if (msg != null) {
        return msg;
      } else {
        return "Couldn't parse this field";
      }
    }
  };

  parseArtAndEval = function(text) {
    var status;
    status = _pl.parseText(text, _ap.arithmetic);
    return _aeval.arithmetic["eval"](status.result);
  };

  ko.validation.rules['evalBetween'] = {
    validator: function(val, vals) {
      var v1, v2;
      v1 = vals[0], v2 = vals[1];
      val = parseArtAndEval(val);
      if ((typeof val) === "number") {
        return val >= v1 && val <= v2;
      } else {
        return true;
      }
    },
    message: function(vals) {
      return "This field's value must be beetween " + vals[0] + " and " + vals[1];
    }
  };

  ko.validation.registerExtenders();

  tabsJQueryPlugin = function($) {
    return $.fn.createTabs = function(options) {
      var addEvent, child, menu, settings, showForm, _i, _len, _ref;
      settings = $.extend({
        target: $('#forms')
      }, options);
      menu = this;
      showForm = function(choosen) {
        var child, _i, _len, _ref;
        _ref = settings.target.children();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          $(child).hide();
        }
        return $('#' + choosen).show();
      };
      addEvent = function(child) {
        return function() {
          var other, _i, _len, _ref;
          _ref = menu.children();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            other = _ref[_i];
            $(other).removeClass('active');
          }
          $(child).addClass('active');
          return showForm($(child).attr('target-form'));
        };
      };
      _ref = this.children();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        $(child).click(addEvent(child));
      }
      return this;
    };
  };

  tabsJQueryPlugin(jQuery);

  this.MathCalc = (function(_super) {
    __extends(MathCalc, _super);

    function MathCalc() {
      return MathCalc.__super__.constructor.apply(this, arguments);
    }

    MathCalc.prototype.renderBlock = function(name, data) {
      var blockHtml, match, replace;
      blockHtml = $("#" + name + "-block-template").html();
      for (match in data) {
        replace = data[match];
        blockHtml = blockHtml.split("{" + match + "}").join(replace);
      }
      $(".calc-answer").append(blockHtml);
      return MathJax.Hub.Queue(["Typeset", MathJax.Hub, "" + name + "-block"], (function(_this) {
        return function() {
          $("#" + name + "-block .tex").show();
          return $("#" + name + "-block .buffer").hide();
        };
      })(this));
    };

    MathCalc.prototype.parseMathExpr = function(expr) {
      var arithmetic, parseText, status;
      if (expr === '') {
        return '';
      }
      parseText = _pl.parseText;
      arithmetic = _ap.arithmetic;
      status = parseText(expr.toString(), arithmetic);
      return status.result;
    };

    return MathCalc;

  })(JsCalculator);

  this.SimplifyCalc = (function(_super) {
    __extends(SimplifyCalc, _super);

    function SimplifyCalc(sendAddr) {
      this.handleInputChange = __bind(this.handleInputChange, this);
      this.transform = __bind(this.transform, this);
      this.init = __bind(this.init, this);
      this.getInput = __bind(this.getInput, this);
      this.handleAnswer = __bind(this.handleAnswer, this);
      this.displayPreview = __bind(this.displayPreview, this);
      var latexPrinter;
      this.expr = ko.observable("");
      this.expr.extend({
        required: true
      });
      this.expr.extend({
        qtipValidation: {
          rule: _math.mathRule,
          selector: function() {
            return '#expr';
          }
        }
      });
      this.expr.subscribe(this.displayPreview);
      latexPrinter = _printer.latexPrinter;
      this.printLatex = function(x) {
        return "\\(\\displaystyle " + (latexPrinter.print(x)) + "\\)";
      };
      SimplifyCalc.__super__.constructor.call(this, sendAddr, this.handleAnswer, this.getInput, this.init, this.handleInputChange, this.transform);
      this.addSendListener(function() {
        return $(function() {
          $(".calc-answer").show().addClass('ajax-loader');
          return _pw.hide();
        });
      });
    }

    SimplifyCalc.prototype.displayPreview = function() {
      if (typeof MathJax === "undefined" || MathJax === null) {
        return false;
      }
      if (this.errors().length === 0) {
        _pw.display(this.printLatex(this.parseMathExpr(this.expr())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, "preview-content"]);
      } else {
        return _pw.displayError();
      }
    };

    SimplifyCalc.prototype.handleAnswer = function(data) {
      var e, json, renderResult, result, sympyExpr;
      $(".calc-answer").empty();
      this.renderBlock("input", {
        input: this.printLatex(this.parseMathExpr(this.expr()))
      });
      renderResult = (function(_this) {
        return function(text) {
          _this.renderBlock("result", {
            result: text
          });
          return $(".calc-answer").removeClass('ajax-loader');
        };
      })(this);
      try {
        json = JSON.parse(data);
        sympyExpr = json.textResult;
        result = this.parseMathExpr(sympyExpr.replace(/\*\*/g, '^'));
        if ((this.printLatex(result)) === this.printLatex(this.parseMathExpr(this.expr()))) {
          return renderResult("The expression is in its most simplified form.");
        } else {
          return renderResult(this.printLatex(result));
        }
      } catch (_error) {
        e = _error;
        return renderResult("The expression could not be simplified.");
      }
    };

    SimplifyCalc.prototype.getInput = function() {
      var input;
      input = {
        "expr": this.expr()
      };
      return input;
    };

    SimplifyCalc.prototype.init = function() {
      return ko.applyBindings(this, document.getElementById('simplify-form'));
    };

    SimplifyCalc.prototype.transform = function(input) {
      var expr;
      expr = input.expr.toString().split(" ").join("");
      input = {
        "expr": this.parseMathExpr(expr)
      };
      return {
        "input": JSON.stringify(input)
      };
    };

    SimplifyCalc.prototype.handleInputChange = function(input) {
      return this.expr(input.expr);
    };

    return SimplifyCalc;

  })(MathCalc);

  SyntaxError = (function() {
    function SyntaxError(found) {
      this.found = found;
      this.name = "SyntaxError";
    }

    return SyntaxError;

  })();

  MathRule = (function() {
    function MathRule() {
      this.validator = __bind(this.validator, this);
    }

    MathRule.prototype.message = '';

    MathRule.prototype.validator = function(val) {
      var arithmetic, e, found, isValid, parseText, pos, status, _ref;
      if ((typeof val) === "string") {
        val = val.split(" ").join("");
      }
      if (val === null || val.length === 0) {
        return true;
      }
      try {
        parseText = _pl.parseText;
        arithmetic = _ap.arithmetic;
        status = parseText(val.toString(), arithmetic);
        if (status.text.length > 0) {
          pos = (_ref = Number(status.text.charAt(0))) !== "+" && _ref !== "-" && _ref !== "*" && _ref !== "/" && _ref !== "^";
          throw new SyntaxError(status.text.charAt(pos));
        }
        isValid = true;
      } catch (_error) {
        e = _error;
        if (e.name === "SyntaxError") {
          found = e.found;
          if (found === null || found.length === 0) {
            found = "end of input";
          }
        }
        isValid = false;
      }
      if (found != null) {
        this.message = "Unexpected " + found + ".";
      }
      return isValid;
    };

    return MathRule;

  })();

  this._math = {};

  this._math.mathRule = new MathRule;

  parserFormView = function(args) {
    var error, field, main;
    main = $(args.tag);
    field = $('<input>').attr('type', 'text').addClass(args.inputClass);
    main.append(field);
    error = $('<span>').hide();
    main.append(error);
    return {
      main: main,
      error: error,
      field: field
    };
  };

  mainViewManager.addView('ParserForm', parserFormView);

  ParserForm = (function(_super) {
    __extends(ParserForm, _super);

    function ParserForm(config) {
      this.setInput = __bind(this.setInput, this);
      this.getInput = __bind(this.getInput, this);
      this.validate = __bind(this.validate, this);
      this.build = __bind(this.build, this);
      this.extractConfig(config);
      ParserForm.__super__.constructor.call(this, this.getInput, this.setInput, this.build);
    }

    ParserForm.prototype.extractConfig = function(config) {
      this.config = config;
      if (this.config.msg == null) {
        this.config.msg = "Couldn't parse input";
      }
      if (this.config.viewName == null) {
        this.config.viewName = 'ParserForm';
      }
      if (this.config.inputClass == null) {
        this.config.inputClass = 'input-mini';
      }
      if (this.config.tag == null) {
        this.config.tag = '<div>';
      }
      return this.expectedConfigValues(config, ['parser']);
    };

    ParserForm.prototype.build = function() {
      var proxyConfig;
      this.elements = mainViewManager.render(this.config.viewName, this.config);
      proxyConfig = (function(_this) {
        return function(fireEvent) {
          return {
            target: _this.elements.field,
            msg: _this.config.msg,
            validate: _this.validate,
            validCallback: function() {
              _this.changeValidationEntry('element', true);
              return fireEvent();
            },
            unvalidCallback: function() {
              return _this.changeValidationEntry('element', false);
            }
          };
        };
      })(this);
      this.elements.field.change((function(_this) {
        return function() {
          return (JsForm.validateProxy(proxyConfig(_this.fireChangeEvent)))(_this.elements.field.val());
        };
      })(this));
      this.elements.field.keyup((function(_this) {
        return function() {
          return (JsForm.validateProxy(proxyConfig(_this.firePreviewEvent)))(_this.elements.field.val());
        };
      })(this));
      return this.elements.main;
    };

    ParserForm.prototype.validate = function(value) {
      var error, status, _ref;
      try {
        status = _pl.parseText(value, this.config.parser);
        return ((_ref = status.text) != null ? _ref.length : void 0) === 0;
      } catch (_error) {
        error = _error;
        return false;
      }
    };

    ParserForm.prototype.getInput = function() {
      return this.elements.field.val();
    };

    ParserForm.prototype.setInput = function(input) {
      return this.elements.field.val(input);
    };

    return ParserForm;

  })(JsForm);

  this.ParserForm = ParserForm;

  BinomialForm = (function(_super) {
    __extends(BinomialForm, _super);

    function BinomialForm() {
      this.build = __bind(this.build, this);
      this.setInput = __bind(this.setInput, this);
      this.getInput = __bind(this.getInput, this);
      BinomialForm.__super__.constructor.call(this, this.getInput, this.setInput, this.build);
    }

    BinomialForm.prototype.getInput = function() {
      return {
        a: this.a.getInput(),
        b: this.b.getInput(),
        n: this.n.val()
      };
    };

    BinomialForm.prototype.setInput = function(input) {
      this.a.setInput(input.a);
      this.b.setInput(input.b);
      return this.n.val(input.n);
    };

    BinomialForm.prototype.build = function() {
      var main;
      main = this.createView();
      this.addEvents();
      return main;
    };

    BinomialForm.prototype.addEvents = function() {
      var nValidate;
      this.a.addChangeListener(this.fireChangeEvent);
      this.a.addPreviewListener(this.firePreviewEvent);
      this.a.addValidationListener((function(_this) {
        return function(value) {
          return _this.changeValidationEntry('a', value);
        };
      })(this));
      this.b.addChangeListener(this.fireChangeEvent);
      this.b.addPreviewListener(this.firePreviewEvent);
      this.b.addValidationListener((function(_this) {
        return function(value) {
          return _this.changeValidationEntry('b', value);
        };
      })(this));
      nValidate = JsForm.validateProxy({
        target: this.n,
        msg: function(val) {
          return "" + val + " isn't between -50 and 50";
        },
        validate: function(val) {
          return (-51 < val && val < 51);
        },
        validCallback: (function(_this) {
          return function() {
            _this.fireChangeEvent();
            return _this.changeValidationEntry('n', true);
          };
        })(this),
        unvalidCallback: (function(_this) {
          return function() {
            return _this.changeValidationEntry('n', false);
          };
        })(this)
      });
      this.n.change((function(_this) {
        return function() {
          return nValidate(_this.n.val());
        };
      })(this));
      this.n.change(this.firePreviewEvent);
      return this.n.keyup(this.firePreviewEvent);
    };

    BinomialForm.prototype.createView = function() {
      var main;
      main = $('<div>');
      main.append('(');
      this.a = new ParserForm({
        parser: _ap.arithmetic,
        tag: '<span>'
      });
      main.append(this.a.build());
      main.append('+');
      this.b = new ParserForm({
        parser: _ap.arithmetic,
        tag: '<span>'
      });
      main.append(this.b.build());
      main.append(')');
      this.n = $('<input>').addClass('input-mini exponent').attr('type', 'number');
      main.append(this.n);
      this.send = $('<button>').addClass('btn btn-submit').html('Calculate');
      main.append(this.send);
      return main;
    };

    return BinomialForm;

  })(JsForm);

  parseArt = function(expr) {
    var arithmetic, parseText, status;
    arithmetic = _ap.arithmetic;
    parseText = _pl.parseText;
    status = parseText(expr, arithmetic);
    return status.result;
  };

  parsedInputToLatex = function(input) {
    var displayExpr, latexPrinter;
    displayExpr = {
      '^': [
        {
          '+': [input.a, input.b]
        }, input.n
      ]
    };
    latexPrinter = _printer.latexPrinter;
    return latexPrinter.print(displayExpr);
  };

  binomialInputToLatex = function(input) {
    return parsedInputToLatex({
      a: parseArt(input.a),
      b: parseArt(input.b),
      n: parseArt(input.n)
    });
  };

  BinomialInputDisplay = (function(_super) {
    __extends(BinomialInputDisplay, _super);

    function BinomialInputDisplay(config) {
      config.displayElement = this.displayElement;
      BinomialInputDisplay.__super__.constructor.call(this, config);
      this.calc = config.calc;
      this.addClickListener((function(_this) {
        return function(element) {
          UrlTool.setUrlFromInput(element);
          return _this.calc.sendUrlQuery();
        };
      })(this));
    }

    BinomialInputDisplay.prototype.displayElement = function(input) {
      return '\\(' + (binomialInputToLatex(input)) + '\\)';
    };

    return BinomialInputDisplay;

  })(InputDisplay);

  binomialExamples = [
    {
      a: 'a',
      b: 'b',
      n: '4'
    }, {
      a: 'a',
      b: '1',
      n: '5'
    }, {
      a: 'a^2',
      b: 'b*3',
      n: '4'
    }, {
      a: 'a/b',
      b: '1',
      n: '2'
    }
  ];

  prepareAnswer = function(answer) {
    return JSON.parse(answer);
  };

  extractAndParseResult = function(answer) {
    var result;
    result = answer.result;
    result.replace('**', '^');
    return parseArt(result);
  };

  displayResult = function(answer) {
    var main, result;
    answer = prepareAnswer(answer);
    main = $('<div>');
    main.append($('<h2>').append('Result'));
    result = extractAndParseResult(answer);
    main.append('\\(' + (parsedInputToLatex(answer.input)) + '\\)');
    main.append(' = ');
    main.append('\\(' + (_printer.latexPrinter.print(result)) + '\\)');
    return main;
  };

  this.BinomialCalc = (function(_super) {
    __extends(BinomialCalc, _super);

    function BinomialCalc(address) {
      this.init = __bind(this.init, this);
      this.handleInputChange = __bind(this.handleInputChange, this);
      this.getInput = __bind(this.getInput, this);
      BinomialCalc.__super__.constructor.call(this, address, this.handleAnswer, this.getInput, this.init, this.handleInputChange, this.transformInput);
    }

    BinomialCalc.prototype.handleAnswer = function(answer) {
      $('#calc-answer').show();
      $('#calc-answer').empty();
      $('#calc-answer').html(displayResult(answer));
      MathJax.Hub.Queue(["Typeset", MathJax.Hub, "calc-answer"]);
      return $(".calc-answer").show().removeClass('ajax-loader');
    };

    BinomialCalc.prototype.getInput = function() {
      return this.form.getInput();
    };

    BinomialCalc.prototype.transformInput = function(input) {
      var parsedInput;
      parsedInput = {
        a: parseArt(input.a.toString()),
        b: parseArt(input.b.toString()),
        n: parseArt(input.n.toString())
      };
      return {
        input: JSON.stringify(parsedInput)
      };
    };

    BinomialCalc.prototype.handleInputChange = function(input) {
      return this.form.setInput(input);
    };

    BinomialCalc.prototype.init = function() {
      var previewListener;
      this.form = new BinomialForm();
      $('#binomial-form').html(this.form.build());
      this.form.send.click((function(_this) {
        return function() {
          if (_this.form.isValid()) {
            return _this.sendAction();
          }
        };
      })(this));
      previewListener = (function(_this) {
        return function(input) {
          var latex;
          if (_this.isInputComplete(input)) {
            latex = binomialInputToLatex(input);
            $('#preview-content').html('\\(' + latex + '\\)');
            $('#input-preview').show();
            return MathJax.Hub.Queue(["Typeset", MathJax.Hub, "preview-content"]);
          }
        };
      })(this);
      this.form.addPreviewListener(previewListener);
      this.addSendListener(function() {
        $(".calc-answer").show().addClass('ajax-loader');
        return $('#input-preview').hide();
      });
      this.examplesDisplay = new BinomialInputDisplay({
        calc: this,
        elements: binomialExamples
      });
      $('.input-examples').html(this.examplesDisplay.getMainElement());
      return this.examplesDisplay.addRenderListener(function() {
        if (typeof MathJax !== "undefined" && MathJax !== null) {
          return MathJax.Hub.Queue(["Typeset", MathJax.Hub, "integral-examples"]);
        }
      });
    };

    BinomialCalc.prototype.isInputComplete = function(input) {
      var keys;
      keys = function(input) {
        var name, value, _results;
        if ((typeof Object !== "undefined" && Object !== null ? Object.keys : void 0) != null) {
          return Object.keys(input);
        } else {
          _results = [];
          for (name in input) {
            value = input[name];
            _results.push(name);
          }
          return _results;
        }
      };
      return keys(input).every(function(x) {
        x = input[x];
        return x.trim() !== '';
      });
    };

    return BinomialCalc;

  })(JsCalculator);

  gcdParser = _ap.list(_pl.integralParser);

  parseGcd = function(text) {
    var error, status;
    try {
      status = _pl.parseText(text, gcdParser);
      return status.result;
    } catch (_error) {
      error = _error;
      return [];
    }
  };

  GcdModel = (function() {
    function GcdModel() {
      this.getValues = __bind(this.getValues, this);
      this.setValues = __bind(this.setValues, this);
      this.fireEvent = __bind(this.fireEvent, this);
      this.values = [1, 1];
      this.listeners = [];
    }

    GcdModel.prototype.addListener = function(listener) {
      return this.listeners.push(listener);
    };

    GcdModel.prototype.fireEvent = function() {
      var listener, _i, _len, _ref, _results;
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        _results.push(listener(this.values));
      }
      return _results;
    };

    GcdModel.prototype.setValues = function(values) {
      this.values = values;
      return this.fireEvent();
    };

    GcdModel.prototype.getValues = function() {
      return this.values;
    };

    return GcdModel;

  })();

  GcdFirstForm = (function(_super) {
    __extends(GcdFirstForm, _super);

    function GcdFirstForm(model) {
      this.model = model;
      this.setInput = __bind(this.setInput, this);
      this.getInput = __bind(this.getInput, this);
      this.removeField = __bind(this.removeField, this);
      this.addField = __bind(this.addField, this);
      this.modelListener = __bind(this.modelListener, this);
      this.build = __bind(this.build, this);
      GcdFirstForm.__super__.constructor.call(this, this.getInput, this.setInput, this.build);
      this.addChangeListener((function(_this) {
        return function() {
          return _this.model.setValues(_this.getValues());
        };
      })(this));
      this.doDebounce = false;
    }

    GcdFirstForm.prototype.build = function() {
      var main;
      main = $('<div>');
      this.fields = $('<div>');
      this.fieldsElements = [];
      this.model.addListener(this.modelListener);
      this.modelListener(this.model.getValues());
      main.append(this.fields);
      $("#add").click((function(_this) {
        return function() {
          _this.addField();
          return _this.fireChangeEvent();
        };
      })(this));
      return main;
    };

    GcdFirstForm.prototype.modelListener = function(values) {
      this.matchLengths(values.length);
      return this.setFieldsValues(values);
    };

    GcdFirstForm.prototype.matchLengths = function(len) {
      var action, diff, _results;
      diff = 0;
      action = void 0;
      if (len > this.fieldsElements.length) {
        diff = len - this.fieldsElements.length;
        action = this.addField;
      } else if (len < this.fieldsElements.length) {
        diff = this.fieldsElements.length - len;
        action = this.removeField;
      }
      _results = [];
      while (diff > 0) {
        action();
        _results.push(diff -= 1);
      }
      return _results;
    };

    GcdFirstForm.prototype.addField = function() {
      var close, field, fieldParent;
      fieldParent = $('<div>').addClass('inline-block');
      field = $('<input>').addClass('input-mini').attr('type', 'number').val(1);
      field.keyup(this.fireChangeEvent);
      field.change(this.fireChangeEvent);
      close = $('<div>').addClass('close').html('&times;');
      close.click((function(_this) {
        return function() {
          var fieldElem, newFieldsElements, _i, _len, _ref;
          if (_this.fieldsElements.length > 2) {
            fieldParent.remove();
            newFieldsElements = [];
            _ref = _this.fieldsElements;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              fieldElem = _ref[_i];
              if (fieldElem !== fieldParent) {
                newFieldsElements.push(fieldElem);
              }
            }
            _this.fieldsElements = newFieldsElements;
            return _this.fireChangeEvent();
          }
        };
      })(this));
      fieldParent.append(close);
      fieldParent.append(field);
      fieldParent.val = function() {
        return field.val.apply(field, arguments);
      };
      this.fields.append(fieldParent);
      return this.fieldsElements.push(fieldParent);
    };

    GcdFirstForm.prototype.removeField = function() {
      var element;
      if (this.fieldsElements.length > 2) {
        element = this.fieldsElements.pop();
        return element.remove();
      }
    };

    GcdFirstForm.prototype.setFieldsValues = function(values) {
      var i, value, _i, _len, _results;
      i = 0;
      _results = [];
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        value = values[_i];
        this.fieldsElements[i].val(value);
        _results.push(i++);
      }
      return _results;
    };

    GcdFirstForm.prototype.getValues = function() {
      var fieldElem, values, _i, _len, _ref;
      values = [];
      _ref = this.fieldsElements;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fieldElem = _ref[_i];
        values.push(this.extractValueFromField(fieldElem));
      }
      return values;
    };

    GcdFirstForm.prototype.extractValueFromField = function(fieldElem) {
      var textValue;
      textValue = fieldElem.val();
      if (textValue.trim() === '') {
        textValue = '1';
      }
      return parseFloat(textValue);
    };

    GcdFirstForm.prototype.getInput = function() {
      return {
        values: this.model.getValues()
      };
    };

    GcdFirstForm.prototype.setInput = function(input) {
      return this.model.setValues(input.values);
    };

    return GcdFirstForm;

  })(JsForm);

  GcdSecondForm = (function(_super) {
    __extends(GcdSecondForm, _super);

    function GcdSecondForm(model) {
      this.model = model;
      this.setInput = __bind(this.setInput, this);
      this.getInput = __bind(this.getInput, this);
      this.build = __bind(this.build, this);
      GcdSecondForm.__super__.constructor.call(this, this.getInput, this.setInput, this.build);
      this.doDebounce = false;
    }

    GcdSecondForm.prototype.build = function() {
      var modelListener;
      this.field = $('<input id="list-input">').attr('type', 'text').addClass('big input-xxlarge');
      this.field.change((function(_this) {
        return function() {
          var values;
          values = parseGcd(_this.field.val());
          if (values.length >= 2) {
            _this.model.setValues(values);
            return _this.fireChangeEvent();
          } else {
            return modelListener(_this.model.getValues());
          }
        };
      })(this));
      modelListener = (function(_this) {
        return function(values) {
          return _this.field.val(values.join(', '));
        };
      })(this);
      this.model.addListener(modelListener);
      modelListener(this.model.getValues());
      return this.field;
    };

    GcdSecondForm.prototype.getInput = function() {
      return {
        values: this.model.getValues()
      };
    };

    GcdSecondForm.prototype.setInput = function(input) {
      return this.model.setValues(input.values);
    };

    return GcdSecondForm;

  })(JsForm);

  GcdInputDisplay = (function(_super) {
    __extends(GcdInputDisplay, _super);

    function GcdInputDisplay(config) {
      config.displayElement = this.displayElement;
      GcdInputDisplay.__super__.constructor.call(this, config);
      this.calc = config.calc;
      this.addClickListener((function(_this) {
        return function(element) {
          UrlTool.setUrlFromInput(element);
          return _this.calc.sendUrlQuery();
        };
      })(this));
    }

    GcdInputDisplay.prototype.displayElement = function(input) {
      return 'gcd(' + input.values.join(', ') + ')';
    };

    return GcdInputDisplay;

  })(InputDisplay);

  random = function() {
    return Math.floor(Math.random() * 100);
  };

  factor = Math.round(random() / 10);

  gcdExamples = [
    {
      values: [20, 15]
    }, {
      values: [200, 150]
    }, {
      values: [13 * 7 * 5, 14 * 7 * 5, 11 * 7 * 5]
    }, {
      values: [random() * factor, random() * factor, random() * factor]
    }
  ];

  euclideanAlg = function(a, b) {
    var steps, t;
    steps = [];
    while (b !== 0) {
      steps.push([a, b]);
      t = b;
      b = a % t;
      a = t;
    }
    return {
      result: a,
      steps: steps
    };
  };

  multiEuclideanAlg = function(list, steps) {
    var a, b, prevList, singleResult;
    if (steps == null) {
      steps = [];
    }
    if (list.length < 2) {
      throw "Please, supply at least 2 numbers.";
    }
    if (list.length === 2) {
      singleResult = euclideanAlg(list[0], list[1]);
      steps.push({
        detail: singleResult,
        list: list
      });
      return {
        steps: steps,
        result: singleResult.result
      };
    } else {
      prevList = list.concat([]);
      a = list.pop();
      b = list.pop();
      singleResult = euclideanAlg(a, b);
      list.push(singleResult.result);
      steps.push({
        detail: singleResult,
        list: prevList
      });
      return multiEuclideanAlg(list, steps);
    }
  };

  displayStep = function(step, main) {
    var btn, detail, pair, _i, _len, _ref;
    main.append('gcd(' + step.list.join(', ') + ') =');
    detail = $('<div>').addClass('well well-sm').css('display', 'none');
    _ref = step.detail.steps;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pair = _ref[_i];
      detail.append("gcd(" + pair[0] + ", " + pair[1] + ") = ");
    }
    detail.append(step.detail.result);
    btn = $('<button>').addClass('btn btn-sm btn-bump show').html('Why?').click((function(_this) {
      return function() {};
    })(this));
    main.append(btn.click((function(_this) {
      return function() {
        return detail.toggle();
      };
    })(this)));
    return main.append(detail);
  };

  displayEuclideanAnswer = function(answer) {
    var main, step, _i, _len, _ref;
    main = $('<div>');
    main.append($('<h2>').append('Result'));
    main.append($('<result>').append("" + answer.result));
    main.append($('<h2>').append('Steps'));
    _ref = answer.steps;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      step = _ref[_i];
      displayStep(step, main);
    }
    main.append("<strong>" + answer.result + "</strong>");
    return main;
  };

  this.GcdCalc = (function(_super) {
    __extends(GcdCalc, _super);

    function GcdCalc(address) {
      this.init = __bind(this.init, this);
      this.handleInputChange = __bind(this.handleInputChange, this);
      this.getInput = __bind(this.getInput, this);
      this.fireCallbackQuery = __bind(this.fireCallbackQuery, this);
      GcdCalc.__super__.constructor.call(this, null, this.handleAnswer, this.getInput, this.init, this.handleInputChange);
      this.model = new GcdModel();
      this.model.addListener(this.sendAction);
    }

    GcdCalc.prototype.fireCallbackQuery = function(input) {
      var answer;
      answer = multiEuclideanAlg(input.values.concat([]));
      return this.handleAnswer(answer);
    };

    GcdCalc.prototype.handleAnswer = function(answer) {
      $('#calc-answer').empty();
      $('#calc-answer').show();
      return $('#calc-answer').html(displayEuclideanAnswer(answer));
    };

    GcdCalc.prototype.getInput = function() {
      return {
        values: this.model.getValues()
      };
    };

    GcdCalc.prototype.handleInputChange = function(input) {
      this.model.setValues(input.values);
      return this.sendAction();
    };

    GcdCalc.prototype.init = function() {
      this.firstForm = new GcdFirstForm(this.model);
      $('#first-form').html(this.firstForm.build());
      this.secondForm = new GcdSecondForm(this.model);
      $('#second-form').html(this.secondForm.build());
      this.examplesDisplay = new GcdInputDisplay({
        calc: this,
        elements: gcdExamples
      });
      $('#input-examples').html(this.examplesDisplay.getMainElement());
      this.examplesDisplay.addRenderListener(function() {
        if (typeof MathJax !== "undefined" && MathJax !== null) {
          return MathJax.Hub.Queue(["Typeset", MathJax.Hub, "integral-examples"]);
        }
      });
      return $('#send').click(this.sendAction);
    };

    return GcdCalc;

  })(JsCalculator);

  MathInputModelConnection = (function() {
    function MathInputModelConnection(name, listener, subscribe, getElem) {
      this.name = name;
      this.listener = listener;
      this.subscribe = subscribe;
      this.getElem = getElem;
    }

    return MathInputModelConnection;

  })();

  this.MathInputModelConnection = MathInputModelConnection;

  MathInputModel = (function() {
    function MathInputModel(initVal) {
      var value;
      if (initVal == null) {
        initVal = '';
      }
      this.addListener = __bind(this.addListener, this);
      this.addConnection = __bind(this.addConnection, this);
      this.connections = {};
      value = initVal;
      this.getValue = function() {
        return value;
      };
      this.setValue = (function(_this) {
        return function(newVal, name) {
          var connName, connection, listener, _i, _len, _ref, _ref1, _results;
          if (name == null) {
            name = null;
          }
          value = newVal;
          _ref = _this.connections;
          for (connName in _ref) {
            connection = _ref[connName];
            if (connName !== name) {
              connection.listener(value);
            }
          }
          _ref1 = _this.listeners;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            listener = _ref1[_i];
            _results.push(listener(value));
          }
          return _results;
        };
      })(this);
      this.listener = this.setValue;
      this.listeners = [];
    }

    MathInputModel.prototype.addConnection = function(connection) {
      this.connections[connection.name] = connection;
      return connection.subscribe(this.listener);
    };

    MathInputModel.prototype.addListener = function(listener) {
      return this.listeners.push(listener);
    };

    return MathInputModel;

  })();

  this.MathInputModel = MathInputModel;

  MathQuillConnection = (function(_super) {
    __extends(MathQuillConnection, _super);

    function MathQuillConnection() {
      this.getElem = __bind(this.getElem, this);
      this.subscribe = __bind(this.subscribe, this);
      this.listener = __bind(this.listener, this);
      var changeListener;
      this.elem = $('<span>').mathquill('editable').addClass('tex_input');
      MathQuillConnection.__super__.constructor.call(this, 'tex', this.listener, this.subscribe, this.getElem);
      this.listeners = [];
      changeListener = (function(_this) {
        return function() {
          var error, latex, listener, parsed, textForm, _i, _len, _ref, _results;
          try {
            latex = _this.elem.mathquill('latex');
            parsed = _this.parseLatex(latex);
            textForm = _printer.printPlainText(parsed);
            _ref = _this.listeners;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              listener = _ref[_i];
              _results.push(listener(textForm, name));
            }
            return _results;
          } catch (_error) {
            error = _error;
          }
        };
      })(this);
      this.elem.focusout(changeListener);
    }

    MathQuillConnection.prototype.listener = function(value) {
      var error, latex, parsed;
      try {
        parsed = parseArithmetic(value);
        latex = _printer.print(parsed);
        return this.elem.mathquill('latex', latex);
      } catch (_error) {
        error = _error;
      }
    };

    MathQuillConnection.prototype.subscribe = function(listener) {
      return this.listeners.push(listener);
    };

    MathQuillConnection.prototype.parseLatex = function(latex) {
      return (_pl.parseText(latex, LatexParsing.latexParser)).result;
    };

    MathQuillConnection.prototype.getElem = function() {
      return this.elem;
    };

    return MathQuillConnection;

  })(MathInputModelConnection);

  TextConnection = (function(_super) {
    __extends(TextConnection, _super);

    function TextConnection() {
      this.getElem = __bind(this.getElem, this);
      this.subscribe = __bind(this.subscribe, this);
      this.listener = __bind(this.listener, this);
      var changeListener;
      this.elem = $('<input>').attr('type', 'text');
      TextConnection.__super__.constructor.call(this, 'source', this.listener, this.subscribe, this.getElem);
      this.listeners = [];
      changeListener = (function(_this) {
        return function() {
          var listener, value, _i, _len, _ref, _results;
          value = _this.elem.val();
          _ref = _this.listeners;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            listener = _ref[_i];
            _results.push(listener(value, name));
          }
          return _results;
        };
      })(this);
      this.elem.change(changeListener);
    }

    TextConnection.prototype.listener = function(value) {
      return this.elem.val(value);
    };

    TextConnection.prototype.subscribe = function(listener) {
      return this.listeners.push(listener);
    };

    TextConnection.prototype.parseLatex = function(latex) {
      return (parseText(latex, LatexParsing.latexParser)).result;
    };

    TextConnection.prototype.getElem = function() {
      return this.elem;
    };

    return TextConnection;

  })(MathInputModelConnection);

  MathInput = (function() {
    function MathInput(initVal) {
      if (initVal == null) {
        initVal = '';
      }
      this.build = __bind(this.build, this);
      this.addListener = __bind(this.addListener, this);
      this.addConnection = __bind(this.addConnection, this);
      this.model = new MathInputModel(initVal);
      this.ids = {};
      this.addConnection(new MathQuillConnection());
      this.addConnection(new TextConnection());
    }

    MathInput.prototype.addConnection = function(connection) {
      return this.model.addConnection(connection);
    };

    MathInput.prototype.addListener = function(listener) {
      return this.model.addListener(listener);
    };

    MathInput.prototype.build = function() {
      if (this.main == null) {
        this.makeMainElement();
      }
      return this.main;
    };

    MathInput.prototype.makeMainElement = function() {
      var forms, tabs;
      this.main = $('<span>').addClass('math_input');
      forms = this.createForms();
      tabs = this.createTabs(forms);
      this.main.append(tabs);
      return this.main.append(forms);
    };

    MathInput.prototype.createForms = function() {
      var child, connection, first, forms, id, name, _ref;
      forms = $('<div>');
      first = true;
      _ref = this.model.connections;
      for (name in _ref) {
        connection = _ref[name];
        id = this.getRandomId('form');
        this.ids[name] = id;
        connection.listener(this.model.getValue());
        child = $('<span>').attr('id', id).html(connection.getElem());
        forms.append(child);
        if (first) {
          first = false;
        } else {
          child.hide();
        }
      }
      return forms;
    };

    MathInput.prototype.getRandomId = function(prefix) {
      if (prefix == null) {
        prefix = 'id';
      }
      return prefix + Math.round(Math.random() * 1000000000);
    };

    MathInput.prototype.createTabs = function(forms) {
      var id, name, tabs, _ref;
      tabs = $('<ul>').addClass('nav nav-tabs nav-tabs-default');
      _ref = this.ids;
      for (name in _ref) {
        id = _ref[name];
        tabs.append($('<li>').attr('target-form', id).addClass('active').html(name));
      }
      tabs.createTabs({
        target: forms
      });
      return tabs;
    };

    return MathInput;

  })();

  this.MathInput = MathInput;

  ko.bindingHandlers.mathInput = {
    init: function(elem, valueAccessor) {
      var mathInput, observ;
      observ = valueAccessor();
      if (ko.isObservable(observ)) {
        if (typeof (observ()) !== 'string') {
          observ($(elem).text());
          mathInput = new MathInput($(elem).text());
        } else {
          mathInput = new MathInput(observ());
        }
        $(elem).html(mathInput.build());
        observ.mathInput = mathInput;
        return mathInput.addListener(function(value) {
          return observ(value);
        });
      }
    },
    update: function(elem, valueAccessor) {
      var observ;
      observ = valueAccessor();
      if ((ko.isObservable(observ)) && (observ.mathInput != null)) {
        return observ.mathInput.model.setValue(observ());
      }
    }
  };

  SolverEquation = (function() {
    function SolverEquation(expr) {
      this.expr = ko.observable(expr);
    }

    SolverEquation.prototype.subscribe = function(func) {
      return this.expr.subscribe(func);
    };

    return SolverEquation;

  })();

  SolverModel = (function() {
    function SolverModel() {
      this.removeVariable = __bind(this.removeVariable, this);
      this.addVariable = __bind(this.addVariable, this);
      this.removeEquation = __bind(this.removeEquation, this);
      this.addEquation = __bind(this.addEquation, this);
      this.variables = ['x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'u', 'r', 's', 't', 'u', 'w'];
      this.chosenVars = ko.observableArray();
      this.variableMax = 0;
      this.addVariable();
      this.addVariable('y');
      this.equations = ko.observableArray();
      this.eqMax = 0;
      this.addEquation();
      this.addEquation('y');
      this.equationsLength = ko.computed((function(_this) {
        return function() {
          return _this.equations().length;
        };
      })(this));
      this.varsLength = ko.computed((function(_this) {
        return function() {
          return _this.chosenVars().length;
        };
      })(this));
    }

    SolverModel.prototype.empty = function() {
      var choosenArr, equationArr, x, _i, _j, _len, _len1, _results;
      equationArr = this.equations();
      for (_i = 0, _len = equationArr.length; _i < _len; _i++) {
        x = equationArr[_i];
        equationArr.pop();
      }
      choosenArr = this.chosenVars();
      _results = [];
      for (_j = 0, _len1 = choosenArr.length; _j < _len1; _j++) {
        x = choosenArr[_j];
        _results.push(choosenArr.pop());
      }
      return _results;
    };

    SolverModel.prototype.subscribe = function(func) {
      this.equations.subscribe(func);
      return this.chosenVars.subscribe(func);
    };

    SolverModel.prototype.addEquation = function(value) {
      var equation;
      if (value == null) {
        value = null;
      }
      equation = new SolverEquation((value != null) && (typeof value) === 'string' ? value : 'x');
      this.equations.push({
        eq: equation,
        nr: this.eqMax++
      });
      return equation.subscribe((function(_this) {
        return function() {
          return _this.equations.valueHasMutated();
        };
      })(this));
    };

    SolverModel.prototype.removeEquation = function(equation) {
      return this.equations.remove(equation);
    };

    SolverModel.prototype.addVariable = function(value) {
      var variable;
      if (value == null) {
        value = null;
      }
      variable = {
        name: ko.observable((value != null) && (typeof value) === 'string' ? value : 'x'),
        nr: this.variableMax++
      };
      this.chosenVars.push(variable);
      return variable.name.subscribe((function(_this) {
        return function() {
          return _this.chosenVars.valueHasMutated();
        };
      })(this));
    };

    SolverModel.prototype.removeVariable = function(variable) {
      return this.chosenVars.remove(variable);
    };

    return SolverModel;

  })();

  parseMathExpr = function(expr) {
    var arithmetic, parseText, status;
    if (expr === '') {
      return '';
    }
    parseText = _pl.parseText;
    arithmetic = _ap.arithmetic;
    status = parseText(expr.toString(), arithmetic);
    return status.result;
  };

  createSolverAnswerElement = function(answer) {
    var createPairs, createResultSetElement, first, index, main, resultSet, transformAnswer, _i, _len;
    transformAnswer = function(answer) {
      var obj, _i, _len, _ref, _results;
      answer = JSON.parse(answer);
      _ref = answer.results;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        _results.push(createPairs(obj));
      }
      return _results;
    };
    createPairs = function(obj) {
      var name, value, _results;
      _results = [];
      for (name in obj) {
        value = obj[name];
        _results.push({
          name: name,
          value: value
        });
      }
      return _results;
    };
    createResultSetElement = function(resultSet) {
      var element, latexPrinter, pair, _i, _len;
      element = $('<div>');
      latexPrinter = _printer.latexPrinter;
      this.printLatex = latexPrinter.print;
      this.addMathJaxDelim = function(x) {
        return "\\( \\displaystyle " + x + "\\)";
      };
      element.append("<h2>Solution " + (index++) + "</h2>");
      for (_i = 0, _len = resultSet.length; _i < _len; _i++) {
        pair = resultSet[_i];
        element.append("<b>" + pair.name + "</b> = " + (this.addMathJaxDelim(this.printLatex(parseMathExpr(pair.value.toLowerCase())))) + " <br>");
      }
      return element;
    };
    answer = transformAnswer(answer);
    main = $('<div>');
    index = 1;
    first = true;
    for (_i = 0, _len = answer.length; _i < _len; _i++) {
      resultSet = answer[_i];
      if (!first) {
        main.append('<hr>');
      }
      if (first) {
        first = false;
      }
      main.append(createResultSetElement(resultSet));
    }
    return main;
  };

  this.SolverCalc = (function(_super) {
    __extends(SolverCalc, _super);

    function SolverCalc(address) {
      this.sendQuery = __bind(this.sendQuery, this);
      this.init = __bind(this.init, this);
      this.handleInputChange = __bind(this.handleInputChange, this);
      this.getInput = __bind(this.getInput, this);
      this.handleAnswer = __bind(this.handleAnswer, this);
      SolverCalc.__super__.constructor.call(this, address, this.handleAnswer, this.getInput, this.init, this.handleInputChange, this.transformInput);
    }

    SolverCalc.prototype.handleAnswer = function(answer) {
      var element;
      element = createSolverAnswerElement(answer);
      $('#calc-answer').html(element);
      $("#calc-answer").show().removeClass('ajax-loader');
      return MathJax.Hub.Queue(["Typeset", MathJax.Hub, "calc-answer"]);
    };

    SolverCalc.prototype.getInput = function() {
      return {
        equations: this.extractEquations(),
        variables: this.extractVariables()
      };
    };

    SolverCalc.prototype.extractEquations = function() {
      var equation, _i, _len, _ref, _results;
      _ref = this.model.equations();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        equation = _ref[_i];
        _results.push(equation.eq.expr().replace(new RegExp(' ', 'g'), ''));
      }
      return _results;
    };

    SolverCalc.prototype.extractVariables = function() {
      var variable, _i, _len, _ref, _results;
      _ref = this.model.chosenVars();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        variable = _ref[_i];
        _results.push(variable.name());
      }
      return _results;
    };

    SolverCalc.prototype.transformInput = function(input) {
      var equation, parsedInput;
      parsedInput = {
        equations: (function() {
          var _i, _len, _ref, _results;
          _ref = input.equations;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            equation = _ref[_i];
            _results.push(parseArithmetic(equation.toString()));
          }
          return _results;
        })(),
        variables: input.variables
      };
      return {
        input: JSON.stringify(parsedInput)
      };
    };

    SolverCalc.prototype.handleInputChange = function(input) {
      var equation, variable, _i, _j, _len, _len1, _ref, _ref1, _results;
      this.model.empty();
      _ref = input.equations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        equation = _ref[_i];
        this.model.addEquation(equation);
      }
      _ref1 = input.variables;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        variable = _ref1[_j];
        _results.push(this.model.addVariable(variable));
      }
      return _results;
    };

    SolverCalc.prototype.init = function() {
      this.model = new SolverModel();
      this.model.sendAction = this.sendAction;
      return ko.applyBindings(this.model, document.getElementById('calc-form'));
    };

    SolverCalc.prototype.sendQuery = function(input) {
      if (this.model.equations().length === this.model.chosenVars().length) {
        $("#calc-answer").show().addClass('ajax-loader');
        $('#calc-answer').show();
        $('#send-btn').qtip('destroy', true);
        return SolverCalc.__super__.sendQuery.call(this, input);
      } else {
        $('#calc-answer').hide();
        $('#send-btn').qtip('destroy', true);
        return $('#send-btn').qtip(_vt.getData("Number of equations should be equal to number of variables!"));
      }
    };

    return SolverCalc;

  })(JsCalculator);

  FunctionAtModel = (function() {
    function FunctionAtModel() {
      this.func = ko.observable('x');
      this.func.extend({
        parsable: [_ap.arithmetic, "expected arithmetic expression"],
        required: true
      });
      this.points = ko.observableArray();
      this.addPoint();
      this.rowSize = ko.observable(6);
      this.pointsInRows = ko.computed((function(_this) {
        return function() {
          var count, i, point, result, row, _i, _len, _ref;
          result = [];
          row = [];
          count = 0;
          i = 1;
          _ref = _this.points();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            point = _ref[_i];
            row.push({
              nr: i,
              point: point
            });
            count += 1;
            i += 1;
            if (count >= _this.rowSize()) {
              count = 0;
              result.push(row);
              row = [];
            }
          }
          if (count > 0) {
            result.push(row);
          }
          return result;
        };
      })(this));
    }

    FunctionAtModel.prototype.setPoints = function(points) {
      var p, _i, _len, _results;
      this.points([]);
      _results = [];
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        p = points[_i];
        _results.push(this.addPoint(p));
      }
      return _results;
    };

    FunctionAtModel.prototype.addPoint = function(value) {
      var point;
      if (value == null) {
        value = '1';
      }
      if ((typeof value) !== 'string') {
        value = '1';
      }
      point = ko.observable(value);
      point.extend({
        parsable: [_ap.arithmetic, "expected arithmetic expression"],
        required: true
      });
      this.points.push(point);
      return point.subscribe((function(_this) {
        return function() {
          return _this.points.valueHasMutated();
        };
      })(this));
    };

    FunctionAtModel.prototype.removePoint = function() {
      return this.points.pop();
    };

    return FunctionAtModel;

  })();

  displayFuncAtAnswer = function(answer, rowSize) {
    var createTable, part, parts, prepareParts, _i, _len;
    prepareParts = function() {
      var count, parts, point, points, value, values, _ref;
      count = 0;
      parts = [];
      points = [];
      values = [];
      _ref = answer.results;
      for (point in _ref) {
        value = _ref[point];
        points.push(point);
        values.push(value);
        count += 1;
        if (count >= rowSize) {
          parts.push({
            points: points,
            values: values
          });
          values = [];
          points = [];
          count = 0;
        }
      }
      if (count > 0) {
        parts.push({
          points: points,
          values: values
        });
      }
      return parts;
    };
    createTable = function(part) {
      var point, points, row, table, value, values, _i, _j, _len, _len1;
      table = $('<table>').addClass('table table-bordered');
      points = part.points, values = part.values;
      row = $('<tr>');
      row.append($('<th>').html('x = '));
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        point = points[_i];
        row.append($('<td>').append('\\(' + _printer.print(point) + '\\)'));
      }
      table.append(row);
      row = $('<tr>');
      row.append($('<th>').html('f(x) = '));
      for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
        value = values[_j];
        row.append($('<td>').html('\\(' + _printer.print(value) + '\\)'));
      }
      return table.append(row);
    };
    answer = JSON.parse(answer);
    $('#calc-answer').empty();
    $('#calc-answer').append('<b>Function:</b> ');
    $('#calc-answer').append('\\(' + _printer.print(answer.input.func) + '\\)');
    parts = prepareParts();
    for (_i = 0, _len = parts.length; _i < _len; _i++) {
      part = parts[_i];
      $('#calc-answer').append(createTable(part));
    }
    $('#calc-answer').show();
    return typeof MathJax !== "undefined" && MathJax !== null ? MathJax.Hub.Queue(["Typeset", MathJax.Hub, "calc-answer"]) : void 0;
  };

  this.FunctionAtCalc = (function(_super) {
    __extends(FunctionAtCalc, _super);

    function FunctionAtCalc(address) {
      this.init = __bind(this.init, this);
      this.handleInputChange = __bind(this.handleInputChange, this);
      this.getInput = __bind(this.getInput, this);
      this.handleAnswer = __bind(this.handleAnswer, this);
      overrideKOValidation();
      FunctionAtCalc.__super__.constructor.call(this, address, this.handleAnswer, this.getInput, this.init, this.handleInputChange, this.transformInput);
    }

    FunctionAtCalc.prototype.handleAnswer = function(answer) {
      console.log(answer);
      return displayFuncAtAnswer(answer, this.model.rowSize());
    };

    FunctionAtCalc.prototype.getInput = function() {
      return {
        func: this.model.func(),
        points: this.extractPoints(),
        rowSize: this.model.rowSize()
      };
    };

    FunctionAtCalc.prototype.extractPoints = function() {
      var point, _i, _len, _ref, _results;
      _ref = this.model.points();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        _results.push(point());
      }
      return _results;
    };

    FunctionAtCalc.prototype.transformInput = function(input) {
      var point;
      input = {
        func: parseArithmetic(input.func),
        points: (function() {
          var _i, _len, _ref, _results;
          _ref = input.points;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            point = _ref[_i];
            _results.push(parseArithmetic(point));
          }
          return _results;
        })()
      };
      return {
        input: JSON.stringify(input)
      };
    };

    FunctionAtCalc.prototype.handleInputChange = function(input) {
      this.model.func(input.func);
      this.model.setPoints(input.points);
      return this.model.rowSize(input.rowSize.toString());
    };

    FunctionAtCalc.prototype.init = function() {
      this.model = new FunctionAtModel();
      this.model.sendAction = this.sendAction;
      this.errors = ko.validation.group(this.model, {
        deep: true
      });
      return ko.applyBindings(this.model, document.getElementById('calc-form'));
    };

    return FunctionAtCalc;

  })(JsCalculator);

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var MatrixAdditionCalculator, MatrixArithmeticCalculator, MatrixArithmeticForm, MatrixArithmeticValidator, MatrixCalculator, MatrixCalculatorForm, MatrixDeterminantCalculator, MatrixDeterminantForm, MatrixForm, MatrixInversionCalculator, MatrixInversionForm, MatrixModel, MatrixMultiplicationCalculator, MatrixRankCalculator, MatrixRankForm, MatrixSubtractionCalculator, MatrixTextForm, calculateMatrixSize, checkIfMatrixIsSquare, firstColor, getSingleMatrixInputDefaultConfig, listReduce, makeMatrix, matrixArithmeticValidator, matrixParser, matrixValueParser, operatorMap, parseMatrix, printFactor, printMatrix, printMatrixArithmeticStep, printMultMatrixAritStep, printPlusMinusMatrixAritStep, reduce, secondColor, squareParens, transpose,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  reduce = function(xs, zeroElem, func) {
    var result, x, _i, _len;
    result = zeroElem;
    for (_i = 0, _len = xs.length; _i < _len; _i++) {
      x = xs[_i];
      result = func(result, x);
    }
    return result;
  };

  printMatrix = function(matrix) {
    var result;
    result = '\\(\\begin{bmatrix}';
    result += reduce(matrix, '', function(acc, row) {
      var str, texRow;
      texRow = reduce(row, '', function(acc, x) {
        if (acc !== '') {
          return acc + '&' + _printer.print(x);
        } else {
          return _printer.print(x);
        }
      });
      str = acc;
      if (acc.length > 0) {
        str = acc + '\\\\';
      }
      return str + texRow;
    });
    return result + '\\end{bmatrix}\\)';
  };

  MatrixModel = (function() {
    function MatrixModel() {
      this.setValues = __bind(this.setValues, this);
      this.getValues = __bind(this.getValues, this);
      this.fireEvent = __bind(this.fireEvent, this);
      this.matrixValues = [];
      this.listeners = [];
      this.rows = 0;
      this.cols = 0;
    }

    MatrixModel.prototype.addListener = function(listener) {
      return this.listeners.push(listener);
    };

    MatrixModel.prototype.fireEvent = function() {
      var listener, _i, _len, _ref, _results;
      _ref = this.listeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        _results.push(listener(this.matrixValues, this.rows, this.cols));
      }
      return _results;
    };

    MatrixModel.prototype.getValues = function() {
      return this.matrixValues;
    };

    MatrixModel.prototype.setValues = function(values) {
      this.matrixValues = values;
      this.rows = this.matrixValues.length;
      this.cols = this.calculateCols();
      this.populateWithZeros();
      return this.fireEvent();
    };

    MatrixModel.prototype.calculateCols = function() {
      var max, row, _i, _len, _ref;
      max = 0;
      _ref = this.matrixValues;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        if (row.length > max) {
          max = row.length;
        }
      }
      return max;
    };

    MatrixModel.prototype.populateWithZeros = function() {
      var row, _i, _len, _ref, _results;
      _ref = this.matrixValues;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        _results.push(this.populateRow(row));
      }
      return _results;
    };

    MatrixModel.prototype.populateRow = function(row) {
      var diff, x, _i, _results;
      diff = this.cols - row.length;
      if (diff > 0) {
        _results = [];
        for (x = _i = 1; 1 <= diff ? _i <= diff : _i >= diff; x = 1 <= diff ? ++_i : --_i) {
          _results.push(row.push(0));
        }
        return _results;
      }
    };

    return MatrixModel;

  })();

  this.MatrixModel = MatrixModel;

  MatrixForm = (function(_super) {
    __extends(MatrixForm, _super);

    function MatrixForm(config) {
      this.setInput = __bind(this.setInput, this);
      this.getInput = __bind(this.getInput, this);
      this.removeCol = __bind(this.removeCol, this);
      this.addCol = __bind(this.addCol, this);
      this.removeRow = __bind(this.removeRow, this);
      this.addRow = __bind(this.addRow, this);
      this.build = __bind(this.build, this);
      MatrixForm.__super__.constructor.call(this, this.getInput, this.setInput, this.build);
      this.doDebounce = false;
      this.init(config);
    }

    MatrixForm.prototype.init = function(config) {
      if (config.viewName == null) {
        config.viewName = 'MatrixForm';
      }
      if (config.rows == null) {
        config.rows = 2;
      }
      if (config.cols == null) {
        config.cols = 2;
      }
      if (config.elementCreator == null) {
        config.elementCreator = this.createElement;
      }
      this.config = config;
      this.model = config.model;
      this.addChangeListener((function(_this) {
        return function() {
          return _this.model.setValues(_this.getInput());
        };
      })(this));
      this.model.addListener((function(_this) {
        return function(values, rows, cols) {
          _this.correctRows(rows);
          _this.correctCols(cols);
          return _this.setInput(values);
        };
      })(this));
      this.matrix = [];
      this.rows = 0;
      return this.cols = 0;
    };

    MatrixForm.prototype.createElement = function() {
      return new ParserForm({
        parser: _ap.arithmetic,
        tag: '<span>'
      });
    };

    MatrixForm.prototype.build = function() {
      this.main = $('<div>').addClass('matrix-input');
      this.matrixTarget = $('<div>');
      this.buildColsAndRows();
      this.buildBtns();
      this.fireAllEvents();
      this.main.append(this.matrixTarget);
      return this.main;
    };

    MatrixForm.prototype.buildColsAndRows = function() {
      var _results;
      while (this.cols < this.config.cols) {
        this.addCol();
      }
      _results = [];
      while (this.rows < this.config.rows) {
        _results.push(this.addRow());
      }
      return _results;
    };

    MatrixForm.prototype.buildBtns = function() {
      var container, desc, withFireEvents;
      container = $('<div>').addClass('form-inline');
      desc = $('<span>').addClass('small desc');
      container.append(desc.append(' Rows: '));
      this.addRowBtn = $('<button>').addClass('btn btn-bump start').html(getIcon('plus'));
      container.append(this.addRowBtn);
      this.removeRowBtn = $('<button>').addClass('btn btn-bump end').html(getIcon('minus'));
      container.append(this.removeRowBtn);
      withFireEvents = (function(_this) {
        return function(func) {
          return function() {
            func();
            return _this.fireAllEvents();
          };
        };
      })(this);
      this.addRowBtn.click(withFireEvents(this.addRow));
      this.removeRowBtn.click(withFireEvents(this.removeRow));
      desc = $('<span>').addClass('small desc');
      container.append(desc.append(' Columns: '));
      this.addColBtn = $('<button>').addClass('btn btn-bump start').html(getIcon('plus'));
      container.append(this.addColBtn);
      this.removeColBtn = $('<button>').addClass('btn btn-bump end').html(getIcon('minus'));
      container.append(this.removeColBtn);
      this.main.append(container);
      this.addColBtn.click(withFireEvents(this.addCol));
      return this.removeColBtn.click(withFireEvents(this.removeCol));
    };

    MatrixForm.prototype.correctRows = function(modelRows) {
      var diff, x, _i, _j, _results, _results1;
      diff = this.rows - modelRows;
      if (diff > 0) {
        _results = [];
        for (x = _i = 1; 1 <= diff ? _i <= diff : _i >= diff; x = 1 <= diff ? ++_i : --_i) {
          _results.push(this.removeRow());
        }
        return _results;
      } else if (diff < 0) {
        _results1 = [];
        for (x = _j = -1; -1 <= diff ? _j <= diff : _j >= diff; x = -1 <= diff ? ++_j : --_j) {
          _results1.push(this.addRow());
        }
        return _results1;
      }
    };

    MatrixForm.prototype.correctCols = function(modelCols) {
      var diff, x, _i, _j, _results, _results1;
      diff = this.cols - modelCols;
      if (diff > 0) {
        _results = [];
        for (x = _i = 1; 1 <= diff ? _i <= diff : _i >= diff; x = 1 <= diff ? ++_i : --_i) {
          _results.push(this.removeCol());
        }
        return _results;
      } else if (diff < 0) {
        _results1 = [];
        for (x = _j = -1; -1 <= diff ? _j <= diff : _j >= diff; x = -1 <= diff ? ++_j : --_j) {
          _results1.push(this.addCol());
        }
        return _results1;
      }
    };

    MatrixForm.prototype.addRow = function() {
      var row, rowElements, _ref;
      _ref = this._createRow(), row = _ref.row, rowElements = _ref.rowElements;
      this.matrixTarget.append(row);
      this.matrix.push(rowElements);
      return this.rows += 1;
    };

    MatrixForm.prototype._createRow = function() {
      var element, i, row, rowElements;
      row = $('<div>').addClass('matrix-row form-inline');
      rowElements = [];
      i = 0;
      while (i < this.cols) {
        element = this.getNewElement(this.rows, i);
        row.append(element.build());
        rowElements.push(element);
        i += 1;
      }
      return {
        row: row,
        rowElements: rowElements
      };
    };

    MatrixForm.prototype.removeRow = function() {
      if (this.rows >= 2) {
        this.removeLastChild(this.matrixTarget.children());
        this.matrix.pop();
        return this.rows -= 1;
      }
    };

    MatrixForm.prototype.removeLastChild = function(children) {
      var last;
      last = children[children.length - 1];
      return $(last).detach();
    };

    MatrixForm.prototype.addCol = function() {
      var element, i, row, rowElements, _i, _len, _ref;
      i = 0;
      _ref = this.matrixTarget.children();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        element = this.getNewElement(i, this.cols);
        rowElements = this.matrix[i];
        rowElements.push(element);
        $(row).append(element.build());
        i += 1;
      }
      return this.cols += 1;
    };

    MatrixForm.prototype.removeCol = function() {
      var i, row, rowElements, _i, _len, _ref;
      if (this.cols >= 2) {
        i = 0;
        _ref = this.matrixTarget.children();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          rowElements = this.matrix[i];
          rowElements.pop();
          this.removeLastChild($(row).children());
          i += 1;
        }
        return this.cols -= 1;
      }
    };

    MatrixForm.prototype.getNewElement = function(i, j) {
      var element;
      element = this.config.elementCreator();
      element.addValidationListener((function(_this) {
        return function(value) {
          _this.changeValidationEntry(i + '_' + j, value);
          return _this.fireValidationEvent();
        };
      })(this));
      element.addChangeListener(this.fireChangeEvent);
      element.addPreviewListener(this.firePreviewEvent);
      return element;
    };

    MatrixForm.prototype.getInput = function() {
      var element, matrixValues, row, rowValues, value, _i, _j, _len, _len1, _ref;
      matrixValues = [];
      _ref = this.matrix;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        rowValues = [];
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          element = row[_j];
          value = element.getInput();
          if (value.trim() === '') {
            value = '0';
          }
          rowValues.push(value);
        }
        matrixValues.push(rowValues);
      }
      return matrixValues;
    };

    MatrixForm.prototype.setInput = function(input) {
      var element, i, j, row, _i, _j, _len, _len1, _ref, _results;
      i = 0;
      _ref = this.matrix;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        j = 0;
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          element = row[_j];
          element.setInput(input[i][j]);
          j += 1;
        }
        _results.push(i += 1);
      }
      return _results;
    };

    return MatrixForm;

  })(JsForm);

  this.MatrixForm = MatrixForm;

  squareParens = function(child) {
    return _ap.parens(child, '[', ']');
  };

  matrixParser = squareParens(_ap.list(squareParens(_ap.list(_ap.arithmetic))));

  matrixValueParser = squareParens(_ap.list(squareParens(_ap.list(_pl.regExpParser(/^[^\,]+/)))));

  this.matrixParser = matrixParser;

  MatrixTextForm = (function(_super) {
    __extends(MatrixTextForm, _super);

    function MatrixTextForm(config) {
      this.setInput = __bind(this.setInput, this);
      this.getInput = __bind(this.getInput, this);
      this.build = __bind(this.build, this);
      MatrixTextForm.__super__.constructor.call(this, this.getInput, this.setInput, this.build);
      this.config = config;
      this.model = config.model;
    }

    MatrixTextForm.prototype.build = function() {
      this.main = $('<div>');
      this.buildTabs();
      this.buildField();
      this.buildFirstForm();
      return this.main;
    };

    MatrixTextForm.prototype.buildTabs = function() {
      var firstId, forms, secondId, tabs;
      firstId = 'first' + Math.round(Math.random() * 100000);
      secondId = 'second' + Math.round(Math.random() * 100000);
      forms = $('<div>');
      this.firstForm = $('<div>').attr('id', firstId);
      forms.append(this.firstForm);
      this.secondForm = $('<div>').css('display', 'none').attr('id', secondId);
      forms.append(this.secondForm);
      tabs = $('<ul>').addClass('nav nav-tabs nav-tabs-default');
      tabs.createTabs({
        target: forms
      });
      this.main.append(tabs);
      return this.main.append(forms);
    };

    MatrixTextForm.prototype.buildField = function() {
      var field;
      field = new ParserForm({
        parser: matrixParser,
        inputClass: 'span3'
      });
      field.addChangeListener((function(_this) {
        return function() {
          _this.model.setValues(_this.extractValuesFromText(field.getInput()));
          return _this.fireChangeEvent();
        };
      })(this));
      field.addValidationListener((function(_this) {
        return function(valid) {
          _this.changeValidationEntry('field', valid);
          return _this.fireValidationEvent();
        };
      })(this));
      field.addPreviewListener(this.firePreviewEvent);
      this.model.addListener(function(values) {
        var row, rows;
        rows = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = values.length; _i < _len; _i++) {
            row = values[_i];
            _results.push('[' + row.join(',') + ']');
          }
          return _results;
        })();
        return field.setInput('[' + rows.join(', ') + ']');
      });
      return this.secondForm.append(field.build());
    };

    MatrixTextForm.prototype.extractValuesFromText = function(text) {
      var row, rows, _i, _len, _results;
      text = text.trim();
      text = (text.match(/^\[(.*)\]$/))[1];
      rows = (function() {
        var _i, _len, _ref, _results;
        _ref = text.split(']');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          if (row.trim() !== '') {
            _results.push(row.trim());
          }
        }
        return _results;
      })();
      _results = [];
      for (_i = 0, _len = rows.length; _i < _len; _i++) {
        row = rows[_i];
        _results.push(this.extractTextRow(row));
      }
      return _results;
    };

    MatrixTextForm.prototype.extractTextRow = function(row) {
      var element, _i, _len, _ref, _results;
      row = (row.match(/^\,?\s*\[(.*)/))[1];
      _ref = row.split(',');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        _results.push(element.trim());
      }
      return _results;
    };

    MatrixTextForm.prototype.buildFirstForm = function() {
      var matrixForm;
      matrixForm = new MatrixForm({
        model: this.model
      });
      matrixForm.addChangeListener((function(_this) {
        return function(values) {
          _this.model.setValues(values);
          return _this.fireChangeEvent();
        };
      })(this));
      matrixForm.addValidationListener((function(_this) {
        return function(valid) {
          _this.changeValidationEntry('matrix_form', valid);
          return _this.fireValidationEvent();
        };
      })(this));
      matrixForm.addPreviewListener(this.firePreviewEvent);
      return this.firstForm.append(matrixForm.build());
    };

    MatrixTextForm.prototype.getInput = function() {
      return this.model.getValues();
    };

    MatrixTextForm.prototype.setInput = function(input) {
      return this.model.setValues(input);
    };

    return MatrixTextForm;

  })(JsForm);

  this.MatrixTextForm = MatrixTextForm;

  parseMatrix = function(matrix) {
    var element, row, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = matrix.length; _i < _len; _i++) {
      row = matrix[_i];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          element = row[_j];
          _results1.push(parseArithmetic(element + ''));
        }
        return _results1;
      })());
    }
    return _results;
  };

  this.parseMatrix = parseMatrix;

  MatrixCalculatorForm = (function(_super) {
    __extends(MatrixCalculatorForm, _super);

    function MatrixCalculatorForm(config) {
      this.validation = __bind(this.validation, this);
      this.isValid = __bind(this.isValid, this);
      this.build = __bind(this.build, this);
      var defaultConfig;
      defaultConfig = this.getDefaultConfig();
      $.extend(defaultConfig, config);
      MatrixCalculatorForm.__super__.constructor.call(this, defaultConfig);
    }

    MatrixCalculatorForm.prototype.getDefaultConfig = function() {
      throw new Error("undefined getDefaultConfig method");
    };

    MatrixCalculatorForm.prototype.build = function() {
      var main;
      main = MatrixCalculatorForm.__super__.build.call(this);
      this.addChangeListener(this.validation);
      return main;
    };

    MatrixCalculatorForm.prototype.isValid = function() {
      this.validation();
      return MatrixCalculatorForm.__super__.isValid.call(this);
    };

    MatrixCalculatorForm.prototype.validation = function() {
      var error, errors, input;
      input = this.getInput();
      errors = this.getValidationErrors(input);
      if (errors.length === 0) {
        $("#send-btn").qtip('destroy', true);
        return this.changeValidationEntry('matrix-validation', true);
      } else {
        error = errors.join(', ');
        $("#send-btn").qtip('destroy', true);
        $("#send-btn").qtip($.extend(_vt.getData(error), {
          position: {
            my: 'left center',
            at: 'right center'
          }
        }));
        return this.changeValidationEntry('matrix-validation', false);
      }
    };

    MatrixCalculatorForm.prototype.getValidationErrors = function(input) {
      throw new Error("undefined getValidationErrors method");
    };

    return MatrixCalculatorForm;

  })(HtmlForm);

  this.MatrixCalculatorForm = MatrixCalculatorForm;

  calculateMatrixSize = function(matrix) {
    var cols, rows;
    if (!$.isArray(matrix)) {
      throw new Error("expected Matrix");
    }
    rows = matrix.length;
    cols = 0;
    $.map(matrix, function(value) {
      if (value.length > cols) {
        return cols = value.length;
      }
    });
    return {
      rows: rows,
      cols: cols
    };
  };

  this.calculateMatrixSize = calculateMatrixSize;

  checkIfMatrixIsSquare = function(input, field) {
    var cols, rows, _ref;
    if (field == null) {
      field = "matrix";
    }
    if (input[field] == null) {
      throw new Error("Field " + field + " doesn't exists in " + input);
    }
    _ref = calculateMatrixSize(input[field]), rows = _ref.rows, cols = _ref.cols;
    if (rows !== cols) {
      return ["Matrix must be Square"];
    } else {
      return [];
    }
  };

  this.checkIfMatrixIsSquare = checkIfMatrixIsSquare;

  getSingleMatrixInputDefaultConfig = function() {
    return {
      fields: {
        matrix: new MatrixTextForm({
          model: new MatrixModel()
        })
      }
    };
  };

  MatrixCalculator = (function(_super) {
    __extends(MatrixCalculator, _super);

    function MatrixCalculator(sendAddr) {
      this.previewListener = __bind(this.previewListener, this);
      this.sendAction = __bind(this.sendAction, this);
      this.sendQuery = __bind(this.sendQuery, this);
      this.init = __bind(this.init, this);
      this.getInput = __bind(this.getInput, this);
      this.handleInputChange = __bind(this.handleInputChange, this);
      this.showAnswer = __bind(this.showAnswer, this);
      this.handleAnswer = __bind(this.handleAnswer, this);
      MatrixCalculator.__super__.constructor.call(this, sendAddr, this.handleAnswer, this.getInput, this.init, this.handleInputChange, this.transformInput);
    }

    MatrixCalculator.prototype.handleAnswer = function(answer) {
      answer = $.parseJSON(answer);
      $('#calc-answer').show();
      scrollToElement($('#calc-answer'));
      this.showAnswer(answer);
      return MathJax.Hub.Queue(["Typeset", MathJax.Hub, "calc-answer"]);
    };

    MatrixCalculator.prototype.showAnswer = function(answer) {
      throw new Error("undefined showAnswer method");
    };

    MatrixCalculator.prototype.transformInput = function(input) {
      return {
        input: JSON.stringify(this.parseInput(input))
      };
    };

    MatrixCalculator.prototype.parseInput = function(input) {
      throw new Error("undefined parseInput method");
    };

    MatrixCalculator.prototype.handleInputChange = function(input) {
      return this.form.setInput(input);
    };

    MatrixCalculator.prototype.getInput = function() {
      return this.form.getInput();
    };

    MatrixCalculator.prototype.init = function() {
      this.form = this.createForm();
      this.form.build();
      return this.form.addChangeListener(this.previewListener);
    };

    MatrixCalculator.prototype.createForm = function() {
      throw new Error("undefined createForm method");
    };

    MatrixCalculator.prototype.sendQuery = function(input) {
      if (this.form.isValid()) {
        $('#input-preview').hide();
        return MatrixCalculator.__super__.sendQuery.call(this, input);
      }
    };

    MatrixCalculator.prototype.sendAction = function() {
      if (this.form.isValid()) {
        return MatrixCalculator.__super__.sendAction.call(this);
      }
    };

    MatrixCalculator.prototype.previewListener = function(input) {
      throw new Error("undefined previewListener method");
    };

    return MatrixCalculator;

  })(JsCalculator);

  this.MatrixCalculator = MatrixCalculator;

  MatrixArithmeticValidator = (function() {
    function MatrixArithmeticValidator() {
      this.validateMult = __bind(this.validateMult, this);
      this.validatePlusMinus = __bind(this.validatePlusMinus, this);
      this.validate = __bind(this.validate, this);
      this.methods = {
        '+': this.validatePlusMinus,
        '-': this.validatePlusMinus,
        '*': this.validateMult
      };
    }

    MatrixArithmeticValidator.prototype.validate = function(input) {
      if (this.methods[input.operator] != null) {
        return this.methods[input.operator](input);
      } else {
        return ["There is no operator " + input.operator + " defined"];
      }
    };

    MatrixArithmeticValidator.prototype.validatePlusMinus = function(input) {
      var size1, size2;
      size1 = this.calculateSize(input.matrix1);
      size2 = this.calculateSize(input.matrix2);
      if (size1.rows === size2.rows && size1.cols === size2.cols) {
        return [];
      } else {
        return ["Matrices should have the same size"];
      }
    };

    MatrixArithmeticValidator.prototype.validateMult = function(input) {
      var size1, size2;
      size1 = this.calculateSize(input.matrix1);
      size2 = this.calculateSize(input.matrix2);
      if (size1.cols === size2.rows) {
        return [];
      } else {
        return ["Number of columns in the first matrix (" + size1.cols + ") should be equal to the number of rows in the second matrix (" + size2.rows + ")"];
      }
    };

    MatrixArithmeticValidator.prototype.calculateSize = calculateMatrixSize;

    return MatrixArithmeticValidator;

  })();

  matrixArithmeticValidator = new MatrixArithmeticValidator();

  MatrixArithmeticForm = (function(_super) {
    __extends(MatrixArithmeticForm, _super);

    function MatrixArithmeticForm(config) {
      MatrixArithmeticForm.__super__.constructor.call(this, config);
    }

    MatrixArithmeticForm.prototype.getDefaultConfig = function() {
      return {
        fields: {
          matrix1: new MatrixTextForm({
            model: new MatrixModel()
          }),
          matrix2: new MatrixTextForm({
            model: new MatrixModel()
          })
        }
      };
    };

    MatrixArithmeticForm.prototype.getValidationErrors = function(input) {
      return matrixArithmeticValidator.validate(input);
    };

    return MatrixArithmeticForm;

  })(MatrixCalculatorForm);

  firstColor = 'green';

  secondColor = 'red';

  listReduce = function(xss, acc, func) {
    var i, minLen, values, xs, _i, _ref;
    if (xss.length === 0) {
      throw "expected atleast one input";
    }
    minLen = reduce(xss, xss[0].length, function(acc, x) {
      if (acc < x.length) {
        return acc;
      } else {
        return x.length;
      }
    });
    for (i = _i = 0, _ref = minLen - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      values = (function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = xss.length; _j < _len; _j++) {
          xs = xss[_j];
          _results.push(xs[i]);
        }
        return _results;
      })();
      acc = func(acc, values);
    }
    return acc;
  };

  printFactor = function(expr) {
    var result;
    result = _printer.print(expr);
    if ((expr['+'] != null) || (expr['-'] != null)) {
      result = '(' + result + ')';
    }
    return result;
  };

  printPlusMinusMatrixAritStep = function(input) {
    var result;
    result = '\\(\\begin{bmatrix}';
    result += listReduce([input.matrix1, input.matrix2], '', function(acc, values) {
      var str;
      str = acc;
      if (acc.length > 0) {
        str = acc + '\\\\';
      }
      return str + listReduce(values, '', function(acc, values) {
        var expr, x, y;
        x = values[0], y = values[1];
        expr = '\\color{' + firstColor + '}{' + printFactor(x) + '}' + input.operator + '\\color{' + secondColor + '}{' + printFactor(y) + '}';
        if (acc !== '') {
          return acc + '&' + expr;
        } else {
          return expr;
        }
      });
    });
    return result + '\\end{bmatrix}\\)';
  };

  transpose = function(matrix) {
    var colLen, getColumn, j, _i, _ref, _results;
    if (matrix.length === 0) {
      [];
    }
    getColumn = function(matrix, j) {
      var row, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = matrix.length; _i < _len; _i++) {
        row = matrix[_i];
        _results.push(row[j]);
      }
      return _results;
    };
    colLen = matrix[0].length;
    _results = [];
    for (j = _i = 0, _ref = colLen - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; j = 0 <= _ref ? ++_i : --_i) {
      _results.push(getColumn(matrix, j));
    }
    return _results;
  };

  printMultMatrixAritStep = function(input) {
    var column, matrix1, matrix2, matrixAcc, row, rowAcc, _i, _j, _len, _len1;
    matrix2 = transpose(input.matrix2);
    matrix1 = input.matrix1;
    matrixAcc = '';
    for (_i = 0, _len = matrix1.length; _i < _len; _i++) {
      row = matrix1[_i];
      if (matrixAcc.length > 0) {
        matrixAcc += '\\\\';
      }
      rowAcc = '';
      for (_j = 0, _len1 = matrix2.length; _j < _len1; _j++) {
        column = matrix2[_j];
        if (rowAcc.length > 0) {
          rowAcc += '&';
        }
        rowAcc += listReduce([row, column], '', function(acc, values) {
          var x, y;
          x = values[0], y = values[1];
          if (acc !== '') {
            acc += '+';
          }
          return acc + '\\color{' + firstColor + '}{' + printFactor(x) + '} \\times \\color{' + secondColor + '}{' + printFactor(y) + '}';
        });
      }
      matrixAcc += rowAcc;
    }
    return '\\(\\begin{bmatrix}' + matrixAcc + '\\end{bmatrix}\\)';
  };

  printMatrixArithmeticStep = function(input) {
    var _ref;
    if ((_ref = input.operator) === '+' || _ref === '-') {
      return printPlusMinusMatrixAritStep(input);
    } else if (input.operator === '*') {
      return printMultMatrixAritStep(input);
    } else {
      return 'Bad input!';
    }
  };

  operatorMap = {
    '+': '&plus;',
    '-': '&minus;',
    '*': '&times;'
  };

  MatrixArithmeticCalculator = (function(_super) {
    __extends(MatrixArithmeticCalculator, _super);

    function MatrixArithmeticCalculator(sendAddr) {
      this.previewListener = __bind(this.previewListener, this);
      this.createForm = __bind(this.createForm, this);
      this.showAnswer = __bind(this.showAnswer, this);
      MatrixArithmeticCalculator.__super__.constructor.call(this, sendAddr);
    }

    MatrixArithmeticCalculator.prototype.showAnswer = function(answer) {
      var input;
      input = answer.input;
      $('#answerMatrix1').html(printMatrix(input.matrix1));
      $('#answerOperator').html(operatorMap[input.operator]);
      $('#answerMatrix2').html(printMatrix(input.matrix2));
      $('#stepMatrix').html(printMatrixArithmeticStep(input));
      return $('#resulMatrix').html(printMatrix(parseMatrix(answer.result)));
    };

    MatrixArithmeticCalculator.prototype.parseInput = function(input) {
      return {
        matrix1: parseMatrix(input.matrix1),
        matrix2: parseMatrix(input.matrix2),
        operator: input.operator
      };
    };

    MatrixArithmeticCalculator.prototype.createForm = function() {
      return new MatrixArithmeticForm({
        target: $('#form-target'),
        callbacks: {
          send: this.sendAction
        }
      });
    };

    MatrixArithmeticCalculator.prototype.previewListener = function(input) {
      input = this.parseInput(input);
      $('#matrix1').html(printMatrix(input.matrix1));
      $('#operator').html(operatorMap[input.operator]);
      $('#matrix2').html(printMatrix(input.matrix2));
      MathJax.Hub.Queue(["Typeset", MathJax.Hub, "input-preview"]);
      return $('#input-preview').show();
    };

    return MatrixArithmeticCalculator;

  })(MatrixCalculator);

  this.MatrixArithmeticCalculator = MatrixArithmeticCalculator;

  makeMatrix = function(cols, rows) {
    var i, j, matrix, _i, _j, _ref, _ref1;
    matrix = [];
    for (i = _i = 0, _ref = rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      matrix[i] = [];
      for (j = _j = 0, _ref1 = cols - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
        matrix[i][j] = 0;
      }
    }
    return matrix;
  };

  MatrixMultiplicationCalculator = (function(_super) {
    __extends(MatrixMultiplicationCalculator, _super);

    function MatrixMultiplicationCalculator(sendAddr, config) {
      this.config = config;
      this.defaultOperator = '*';
      MatrixMultiplicationCalculator.__super__.constructor.call(this, sendAddr, this.handleAnswer, this.getInput, this.init, this.handleInputChange, this.transformInput);
    }

    MatrixMultiplicationCalculator.prototype.init = function() {
      var input;
      MatrixMultiplicationCalculator.__super__.init.apply(this, arguments);
      input = this.form.getInput();
      input.operator = this.defaultOperator;
      if (this.config != null) {
        input.matrix1 = makeMatrix(this.config.cols1, this.config.rows1);
        input.matrix2 = makeMatrix(this.config.cols2, this.config.rows2);
      }
      return this.form.setInput(input);
    };

    return MatrixMultiplicationCalculator;

  })(MatrixArithmeticCalculator);

  MatrixAdditionCalculator = (function(_super) {
    __extends(MatrixAdditionCalculator, _super);

    function MatrixAdditionCalculator(sendAddr, config) {
      this.config = config;
      MatrixAdditionCalculator.__super__.constructor.call(this, sendAddr, config);
      this.defaultOperator = '+';
    }

    MatrixAdditionCalculator.prototype.init = function() {
      var input;
      MatrixAdditionCalculator.__super__.init.apply(this, arguments);
      input = this.form.getInput();
      input.operator = this.defaultOperator;
      if (this.config != null) {
        input.matrix1 = makeMatrix(this.config.cols, this.config.rows);
        input.matrix2 = makeMatrix(this.config.cols, this.config.rows);
      }
      return this.form.setInput(input);
    };

    return MatrixAdditionCalculator;

  })(MatrixMultiplicationCalculator);

  MatrixSubtractionCalculator = (function(_super) {
    __extends(MatrixSubtractionCalculator, _super);

    function MatrixSubtractionCalculator(sendAddr, config) {
      MatrixSubtractionCalculator.__super__.constructor.call(this, sendAddr, config);
      this.defaultOperator = '-';
    }

    return MatrixSubtractionCalculator;

  })(MatrixAdditionCalculator);

  this.MatrixMultiplicationCalculator = MatrixMultiplicationCalculator;

  this.MatrixAdditionCalculator = MatrixAdditionCalculator;

  this.MatrixSubtractionCalculator = MatrixSubtractionCalculator;

  MatrixDeterminantForm = (function(_super) {
    __extends(MatrixDeterminantForm, _super);

    function MatrixDeterminantForm(config) {
      MatrixDeterminantForm.__super__.constructor.call(this, config);
    }

    MatrixDeterminantForm.prototype.getDefaultConfig = getSingleMatrixInputDefaultConfig;

    MatrixDeterminantForm.prototype.getValidationErrors = checkIfMatrixIsSquare;

    return MatrixDeterminantForm;

  })(MatrixCalculatorForm);

  MatrixDeterminantCalculator = (function(_super) {
    __extends(MatrixDeterminantCalculator, _super);

    function MatrixDeterminantCalculator(sendAddr) {
      this.previewListener = __bind(this.previewListener, this);
      this.createForm = __bind(this.createForm, this);
      this.showAnswer = __bind(this.showAnswer, this);
      MatrixDeterminantCalculator.__super__.constructor.call(this, sendAddr);
    }

    MatrixDeterminantCalculator.prototype.showAnswer = function(answer) {
      var input;
      input = answer.input;
      $('#inputMatrix').html(printMatrix(input.matrix));
      return $('#result').html('\\(' + _printer.print(parseArithmetic(answer.determinant)) + '\\)');
    };

    MatrixDeterminantCalculator.prototype.parseInput = function(input) {
      return {
        matrix: parseMatrix(input.matrix)
      };
    };

    MatrixDeterminantCalculator.prototype.createForm = function() {
      return new MatrixDeterminantForm({
        target: $('#form-target'),
        callbacks: {
          send: this.sendAction
        }
      });
    };

    MatrixDeterminantCalculator.prototype.previewListener = function(input) {
      input = this.parseInput(input);
      $('#matrix').html(printMatrix(input.matrix));
      MathJax.Hub.Queue(["Typeset", MathJax.Hub, "input-preview"]);
      return $('#input-preview').show();
    };

    return MatrixDeterminantCalculator;

  })(MatrixCalculator);

  this.MatrixDeterminantCalculator = MatrixDeterminantCalculator;

  MatrixInversionForm = (function(_super) {
    __extends(MatrixInversionForm, _super);

    function MatrixInversionForm(config) {
      MatrixInversionForm.__super__.constructor.call(this, config);
    }

    MatrixInversionForm.prototype.getDefaultConfig = getSingleMatrixInputDefaultConfig;

    MatrixInversionForm.prototype.getValidationErrors = checkIfMatrixIsSquare;

    return MatrixInversionForm;

  })(MatrixCalculatorForm);

  MatrixInversionCalculator = (function(_super) {
    __extends(MatrixInversionCalculator, _super);

    function MatrixInversionCalculator(sendAddr) {
      this.previewListener = __bind(this.previewListener, this);
      this.createForm = __bind(this.createForm, this);
      this.showAnswer = __bind(this.showAnswer, this);
      MatrixInversionCalculator.__super__.constructor.call(this, sendAddr);
    }

    MatrixInversionCalculator.prototype.showAnswer = function(answer) {
      var input;
      input = answer.input;
      $('#inputMatrix').html(printMatrix(input.matrix));
      return $('#result').html(printMatrix(parseMatrix(answer.inverted)));
    };

    MatrixInversionCalculator.prototype.parseInput = function(input) {
      return {
        matrix: parseMatrix(input.matrix)
      };
    };

    MatrixInversionCalculator.prototype.createForm = function() {
      return new MatrixInversionForm({
        target: $('#form-target'),
        callbacks: {
          send: this.sendAction
        }
      });
    };

    MatrixInversionCalculator.prototype.previewListener = function(input) {
      input = this.parseInput(input);
      $('#matrix').html(printMatrix(input.matrix));
      MathJax.Hub.Queue(["Typeset", MathJax.Hub, "input-preview"]);
      return $('#input-preview').show();
    };

    return MatrixInversionCalculator;

  })(MatrixCalculator);

  this.MatrixInversionCalculator = MatrixInversionCalculator;

  MatrixRankForm = (function(_super) {
    __extends(MatrixRankForm, _super);

    function MatrixRankForm(config) {
      MatrixRankForm.__super__.constructor.call(this, config);
    }

    MatrixRankForm.prototype.getDefaultConfig = getSingleMatrixInputDefaultConfig;

    MatrixRankForm.prototype.getValidationErrors = function() {
      return [];
    };

    return MatrixRankForm;

  })(MatrixCalculatorForm);

  MatrixRankCalculator = (function(_super) {
    __extends(MatrixRankCalculator, _super);

    function MatrixRankCalculator(sendAddr) {
      this.previewListener = __bind(this.previewListener, this);
      this.createForm = __bind(this.createForm, this);
      this.showAnswer = __bind(this.showAnswer, this);
      MatrixRankCalculator.__super__.constructor.call(this, sendAddr, this.handleAnswer, this.getInput, this.init, this.handleInputChange, this.transformInput);
    }

    MatrixRankCalculator.prototype.showAnswer = function(answer) {
      var input;
      input = answer.input;
      $('#inputMatrix').html(printMatrix(input.matrix));
      return $('#result').html('\\(' + _printer.print(parseArithmetic(answer.rank)) + '\\)');
    };

    MatrixRankCalculator.prototype.parseInput = function(input) {
      return {
        matrix: parseMatrix(input.matrix)
      };
    };

    MatrixRankCalculator.prototype.createForm = function() {
      return new MatrixRankForm({
        target: $('#form-target'),
        callbacks: {
          send: this.sendAction
        }
      });
    };

    MatrixRankCalculator.prototype.previewListener = function(input) {
      input = this.parseInput(input);
      $('#matrix').html(printMatrix(input.matrix));
      MathJax.Hub.Queue(["Typeset", MathJax.Hub, "input-preview"]);
      return $('#input-preview').show();
    };

    return MatrixRankCalculator;

  })(MatrixCalculator);

  this.MatrixRankCalculator = MatrixRankCalculator;

}).call(this);
