// Generated by CoffeeScript 1.7.1
(function() {
  var LangChooser, TranslationService, addLangToAddress, addressLangSetting, askForTranslation, changeLang, changeTranslation, createTranslationService, findLang, getCurrentInput, globalLangChooser, handleInputChange, initLangFromGlobalLangChooser, initTranslationText, langSelect, langsFilter, localStorageLangSettings, paramsReplace, replaceParam, restoreLangAddress, safeApply, transable, translate, translateFnCreator, translateModule, translationTest, translations,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  translateModule = angular.module('calculTranslateModule', ['calculUrlToolModule']);

  translate = function($http, $window) {
    return {
      restrict: 'E',
      transclude: true,
      scope: {
        'translationId': '=',
        'lang': '=',
        'editor': '=',
        'content': '=?',
        'sendCallback': '=?',
        'edit': '=?'
      },
      templateUrl: angularAssets['translate_component.html'],
      link: function(scope, element, attrs, controller, transclude) {
        initTranslationText(scope, transclude);
        scope.$watch('lang', function() {
          return askForTranslation($http, scope, $window);
        });
        return scope.send = function() {
          changeTranslation($http, scope);
          if ((scope.sendCallback != null) && (typeof scope.sendCallback) === 'function') {
            return scope.sendCallback();
          }
        };
      }
    };
  };

  translate.$inject = ['$http', '$window'];

  translateModule.directive('calculTranslate', translate);

  initTranslationText = function(scope, transclude) {
    scope.translationText = '';
    if (scope.content == null) {
      return transclude(function(content) {
        scope.translationText = content.text();
        return scope.orignalText = scope.translationText;
      });
    } else {
      scope.translationText = scope.content;
      return scope.orignalText = scope.content;
    }
  };

  askForTranslation = function($http, scope, $window) {
    var address, data, promise;
    address = $window.location.host + $window.location.pathname;
    data = {
      content: scope.orignalText,
      lang: scope.lang.name,
      translationId: scope.translationId,
      address: address
    };
    promise = $http({
      url: webServicesUrls['get_translation'],
      method: 'POST',
      data: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json'
      }
    });
    promise.success(function(data) {
      return scope.translationText = data.content;
    });
    return promise.error(function(data, status, headers) {
      return console.log("couldn't translate");
    });
  };

  changeTranslation = function($http, scope) {
    var data, promise;
    data = {
      content: scope.translationText,
      lang: scope.lang.name,
      translationId: scope.translationId
    };
    promise = $http({
      url: webServicesUrls['edit_translation'],
      method: 'POST',
      data: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json'
      }
    });
    return promise.error(function(data, status, headers) {
      if (scope.editor) {
        return console.log("couldn't change translation", data, status, headers);
      }
    });
  };

  paramsReplace = function(str, params) {
    var i, param, _i, _len;
    i = 1;
    for (_i = 0, _len = params.length; _i < _len; _i++) {
      param = params[_i];
      str = replaceParam(str, param, i);
      i++;
    }
    return str;
  };

  replaceParam = function(str, param, index) {
    var reg;
    reg = new RegExp("\\@\\!\\$" + index + "\\$\\!\\@", "g");
    return str.replace(reg, param);
  };

  translateModule.value('calculParamsReplace', paramsReplace);

  translations = function(ROLE_EDITOR) {
    return {
      restrict: 'E',
      scope: {
        'translations': '=',
        'sendCallback': '=?'
      },
      templateUrl: angularAssets['translations.html'],
      link: function(scope) {
        return scope.editor = ROLE_EDITOR;
      }
    };
  };

  translations.$inject = ['ROLE_EDITOR'];

  translateModule.directive('calculTranslations', translations);

  translationTest = function($scope) {
    return $scope.translationId = 'x222';
  };

  translationTest.$inject = ['$scope'];

  translateModule.controller('calculTranslationTest', translationTest);

  translateModule.value('ROLE_EDITOR', ROLE_EDITOR);

  LangChooser = (function() {
    function LangChooser(langs) {
      this.langs = langs;
      this.selectedLang = this.chooseDefault();
      this.callbacks = [];
    }

    LangChooser.prototype.addCallback = function(callback) {
      return this.callbacks.push(callback);
    };

    LangChooser.prototype.selectLang = function(selectedLang, source) {
      this.selectedLang = selectedLang;
      return this.fireEvent(source);
    };

    LangChooser.prototype.setLangs = function(langs, source) {
      this.langs = langs;
      return this.fireEvent(source);
    };

    LangChooser.prototype.fireEvent = function(source) {
      var callback, event, _i, _len, _ref, _results;
      event = {
        lang: this.selectedLang,
        langs: this.langs,
        source: source
      };
      _ref = this.callbacks;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback(event));
      }
      return _results;
    };

    LangChooser.prototype.chooseDefault = function() {
      var defs;
      defs = this.langs.filter(function(lang) {
        return lang["default"];
      });
      if (defs.length > 0) {
        return defs[0];
      } else {
        return this.langs[0];
      }
    };

    LangChooser.prototype.safeApply = function(scope, fn) {
      return safeApply(scope, fn);
    };

    return LangChooser;

  })();

  globalLangChooser = new LangChooser(LANGS_CONFIG);

  this.globalLangChooser = globalLangChooser;

  translateModule.value('calculGlobalLangChooser', globalLangChooser);

  langsFilter = function($http, $window, langChooser, ROLE_EDITOR) {
    var future;
    future = $http.post(webServicesUrls['get_allowed_langs'], $.param({
      address: $window.location.host + $window.location.pathname
    }), {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      }
    });
    future.success((function(_this) {
      return function(data) {
        var lang, langs, _ref;
        console.log("allowed langs", data);
        langs = (function() {
          var _i, _len, _ref, _ref1, _results;
          _ref = langChooser.langs;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            lang = _ref[_i];
            if (_ref1 = lang.name, __indexOf.call(data, _ref1) >= 0) {
              _results.push(lang);
            }
          }
          return _results;
        })();
        if (!ROLE_EDITOR && langs.length > 0) {
          langChooser.setLangs(langs);
          if (_ref = !langChooser.selectedLang, __indexOf.call(data, _ref) >= 0) {
            return langChooser.selectLang(langs[0]);
          }
        }
      };
    })(this));
    return langChooser;
  };

  langsFilter.$inject = ['$http', '$window', 'calculGlobalLangChooser', 'ROLE_EDITOR'];

  translateModule.factory('calculLangsFilter', langsFilter);

  langSelect = function() {
    return {
      restrict: 'E',
      templateUrl: angularAssets['lang_select.html'],
      link: function(scope) {
        return initLangFromGlobalLangChooser(scope, 'langSelect');
      }
    };
  };

  langSelect.$inject = ['calculLocalStorageLangSettings', 'calculLangsFilter'];

  translateModule.directive('calculSelectLang', langSelect);

  transable = function(ROLE_EDITOR) {
    return {
      restrict: 'E',
      transclude: true,
      scope: {
        'translationId': '=',
        'sendCallback': '=?',
        'content': '=?'
      },
      templateUrl: angularAssets['transable.html'],
      link: function(scope, element, attrs, controller, transclude) {
        initTranslationText(scope, transclude);
        scope.editor = ROLE_EDITOR;
        initLangFromGlobalLangChooser(scope, 'transable');
        scope.innerLang = scope.lang;
        return scope.$watch('lang', function() {
          return scope.innerLang = scope.lang;
        });
      }
    };
  };

  transable.$inject = ['ROLE_EDITOR'];

  translateModule.directive('calculTransable', transable);

  initLangFromGlobalLangChooser = function(scope, sourcePrefix) {
    var source;
    scope.lang = globalLangChooser.selectedLang;
    scope.langs = globalLangChooser.langs;
    source = sourcePrefix + Math.random();
    globalLangChooser.addCallback(function(event) {
      return safeApply(scope, function() {
        if (event.source !== source) {
          scope.lang = event.lang;
          return scope.langs = event.langs;
        }
      });
    });
    return scope.$watch('lang', function() {
      return globalLangChooser.selectLang(scope.lang, source);
    });
  };

  safeApply = function(scope, fn) {
    var condition, phase;
    phase = scope.$root.$$phase;
    condition = (phase === '$apply' || phase === '$digest') && (fn != null) && (typeof fn) === 'function';
    if (condition) {
      return fn();
    } else {
      return scope.$apply(fn);
    }
  };

  TranslationService = (function() {
    function TranslationService(http, paramsReplace, globalLangChooser, translateFnCreator, window) {
      var _ref;
      this.http = http;
      this.paramsReplace = paramsReplace;
      this.translateFnCreator = translateFnCreator;
      this.window = window;
      this.getTranslateFn = __bind(this.getTranslateFn, this);
      this.translated = __bind(this.translated, this);
      this.langs = globalLangChooser.langs;
      this.lang = (globalLangChooser != null ? (_ref = globalLangChooser.selectedLang) != null ? _ref.name : void 0 : void 0) != null;
      globalLangChooser.addCallback((function(_this) {
        return function(event) {
          return _this.lang = event.lang.name;
        };
      })(this));
      this.translations = {};
      this.langTranslated = {};
    }

    TranslationService.prototype.addTranslations = function(translations) {
      var content, translationId, _results;
      _results = [];
      for (translationId in translations) {
        content = translations[translationId];
        this.checkString(translationId);
        this.checkString(content);
        _results.push(this.translations[translationId] = content);
      }
      return _results;
    };

    TranslationService.prototype.safeAddTranslation = function(id, content) {
      this.checkString(content);
      if (this.translations[id] == null) {
        this.translations[id] = content;
        return this.fetchTranslations();
      }
    };

    TranslationService.prototype.checkString = function(val) {
      if ((typeof val) !== "string") {
        throw new Error("expected string, got " + val);
      }
    };

    TranslationService.prototype.fetchTranslations = function() {
      var data, promise;
      data = this.prepareBatchData();
      promise = this.getTranslationPromise(data);
      return this.handleTranslationsPromise(promise);
    };

    TranslationService.prototype.prepareBatchData = function() {
      var address, content, lang, translationId, _ref;
      translations = [];
      address = this.window.location.host + this.window.location.pathname;
      _ref = this.translations;
      for (translationId in _ref) {
        content = _ref[translationId];
        translations.push({
          translationId: translationId,
          content: content,
          address: address
        });
      }
      return {
        langs: (function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.langs;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            lang = _ref1[_i];
            _results.push(lang.name);
          }
          return _results;
        }).call(this),
        translations: translations
      };
    };

    TranslationService.prototype.getTranslationPromise = function(data) {
      return this.http({
        url: webServicesUrls['get_translation_batch'],
        method: 'POST',
        data: JSON.stringify(data),
        headers: {
          'Content-Type': 'application/json'
        }
      });
    };

    TranslationService.prototype.handleTranslationsPromise = function(promise) {
      return promise.success((function(_this) {
        return function(data) {
          return _this.langTranslated = data;
        };
      })(this));
    };

    TranslationService.prototype.translated = function(query) {
      var lang, str, _ref;
      if ((typeof query) === 'string') {
        query = {
          translationId: query
        };
      }
      lang = this.lang;
      if (query.lang) {
        lang = query.lang;
      }
      str = (_ref = this.langTranslated[lang]) != null ? _ref[query.translationId] : void 0;
      if (str == null) {
        str = this.translations[query.translationId];
      }
      if ((query.params != null) && (str != null)) {
        return this.paramsReplace(str, query.params);
      } else {
        return str;
      }
    };

    TranslationService.prototype.getTranslateFn = function() {
      return this.translateFnCreator(this);
    };

    return TranslationService;

  })();

  createTranslationService = function($http, paramsReplace, globalLangChooser, translateFnCreator, $window) {
    return function() {
      return new TranslationService($http, paramsReplace, globalLangChooser, translateFnCreator, $window);
    };
  };

  createTranslationService.$inject = ['$http', 'calculParamsReplace', 'calculGlobalLangChooser', 'calculTranslateFnCreator', '$window'];

  translateModule.factory('createCalculTranslationService', createTranslationService);

  translateFnCreator = function(translationService) {
    return function(id, content) {
      translationService.safeAddTranslation(id, content);
      return translationService.translated({
        translationId: id
      });
    };
  };

  translateModule.value('calculTranslateFnCreator', translateFnCreator);

  addressLangSetting = function(UrlTool, langChooser) {
    var lastLang;
    lastLang = null;
    handleInputChange(UrlTool, langChooser, lastLang);
    langChooser.addCallback(function(event) {
      if (event.source !== 'addressSetting' && (event.lang != null)) {
        addLangToAddress(UrlTool, event.lang);
        return lastLang = event.lang;
      }
    });
    return UrlTool.addUrlChangeListener(function() {
      return lastLang = handleInputChange(UrlTool, langChooser, lastLang);
    });
  };

  addressLangSetting.$inject = ['calculUrlTool', 'calculGlobalLangChooser'];

  translateModule.factory('calculAddressLangSetting', addressLangSetting);

  addLangToAddress = function(UrlTool, lang) {
    var currentInput;
    currentInput = getCurrentInput(UrlTool);
    currentInput['language'] = lang.name;
    return UrlTool.setUrlFromInput(currentInput);
  };

  handleInputChange = function(UrlTool, langChooser, lastLang) {
    var input, name;
    input = getCurrentInput(UrlTool);
    name = input['language'];
    if ((name != null) && name !== (lastLang != null ? lastLang.name : void 0)) {
      return changeLang(UrlTool, langChooser, lastLang, name);
    } else if ((name == null) && (langChooser.selectedLang != null)) {
      return restoreLangAddress(UrlTool, langChooser);
    }
  };

  changeLang = function(UrlTool, langChooser, lastLang, name) {
    var lang;
    lang = findLang(name, langChooser.langs);
    langChooser.selectLang(lang, 'addressSetting');
    return lang;
  };

  restoreLangAddress = function(UrlTool, langChooser) {
    addLangToAddress(UrlTool, langChooser.selectedLang);
    return langChooser.selectedLang;
  };

  getCurrentInput = function(UrlTool) {
    if (UrlTool.checkUrl(false)) {
      return UrlTool.getInputFromUrl();
    } else {
      return {};
    }
  };

  findLang = function(name, langs) {
    return (langs.filter(function(lang) {
      return lang.name === name;
    })).shift();
  };

  localStorageLangSettings = function($window, langChooser) {
    var lang, langStr;
    langStr = $window.localStorage.getItem('language');
    if (langStr != null) {
      lang = JSON.parse(langStr);
      if ((typeof lang) === 'object' && (lang.name != null) && (lang["default"] != null) && (lang.displayName != null)) {
        langChooser.selectLang(lang, 'localStorageSetting');
      }
    }
    return langChooser.addCallback(function(event) {
      if (event.source !== 'localStorageSetting' && (event.lang != null)) {
        return $window.localStorage.setItem('language', JSON.stringify(event.lang));
      }
    });
  };

  localStorageLangSettings.$inject = ['$window', 'calculGlobalLangChooser'];

  translateModule.factory('calculLocalStorageLangSettings', localStorageLangSettings);

}).call(this);
